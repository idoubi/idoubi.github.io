<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>艾逗笔</title>
    <link>https://idoubi.cc/</link>
    <description>Recent content on 艾逗笔</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>© 艾逗笔 2021 All rights reserved.</copyright>
    <lastBuildDate>Thu, 10 Feb 2022 18:23:59 +0800</lastBuildDate><atom:link href="https://idoubi.cc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>新的一年，给电脑换个操作系统</title>
      <link>https://idoubi.cc/posts/install-new-operating-system/</link>
      <pubDate>Thu, 10 Feb 2022 18:23:59 +0800</pubDate>
      
      <guid>https://idoubi.cc/posts/install-new-operating-system/</guid>
      <description>新的一年工作开始了，是不是应该搞点新的事情？先从给电脑换一个新的操作系统开始吧~
 制作启动盘  首先，需要准备一个 U盘，容量最好大于 8G  可以在京东购买这一款：闪迪(SanDisk)128GB USB3.0 U盘
拿到手之后的 U盘长这样： 下载启动盘制作工具  推荐使用启动盘制作软件：Ventoy
进入下载页，根据自己的操作系统，选择一个版本下载并解压。
制作启动盘  插入 U盘，双击打开 Ventory2Disk，点击安装开始制作启动盘：
下载操作系统  下载操作系统 iso文件  在操作系统官网，或者其他资源下载站，选择操作系统的 iso文件下载，一般都是几个 G大小，需要一点时间。
推荐三个我最近在用的操作系统：
  windows11
  ubuntu
  deepin
  把操作系统 iso文件移到 U盘  放置的目录可以任意指定，比如新建一个 iso文件夹，用来放所有操作系统的 iso文件：
安装操作系统  开机 U盘启动  保持 U盘插在电脑上，重启电脑，就会进入 U盘启动页，并把你的 U盘里面放置的操作系统都展示出来：
如果你的电脑重启后没有默认进入 U盘启动页，请自行搜索“开机设置 U盘启动”。
如果你在制作启动盘的时候没有设置主题，你看到的 U盘启动页可能会跟此处显示的不一样。设置 U盘启动页面可以参考：ventory 主题设置
安装操作系统  在 U盘启动页选择其中一个操作系统，进入操作系统安装流程，比如选择的是 win11，则会进入 win11的安装流程：</description>
    </item>
    
    <item>
      <title>「rust」快速上手指南</title>
      <link>https://idoubi.cc/notes/rust-quickstart/</link>
      <pubDate>Tue, 24 Aug 2021 13:51:46 +0800</pubDate>
      
      <guid>https://idoubi.cc/notes/rust-quickstart/</guid>
      <description>安装  安装 rustup 命令行工具  # 下载脚本 curl --proto &amp;#39;=https&amp;#39; --tlsv1.2 https://sh.rustup.rs -sSf | sh # 修改环境变量 source $HOME/.cargo/env # 查看版本 rustup --version rustc --version 使用  单文件输出 Hello World  vi hello.rs
fn main() { println!(&amp;#34;hello rust&amp;#34;) } rustc hello.rs -o hello ./hello 包管理  使用 cargo  # 查看版本 cargo --version # 新建一个包 cargo new demo cd demo # 编译 cargo build # 运行 cargo run # 检测 cargo check # 发布 cargo build --release </description>
    </item>
    
    <item>
      <title>「nginx」配置静态网站访问</title>
      <link>https://idoubi.cc/notes/nginx-config/</link>
      <pubDate>Sun, 22 Aug 2021 21:57:24 +0800</pubDate>
      
      <guid>https://idoubi.cc/notes/nginx-config/</guid>
      <description> Nginx 配置静态网站访问  支持 HTTP 和 HTTPS。
server { listen 443 ssl; server_name idoubi.cc; ssl_certificate /etc/nginx/certs/idoubi.cc.crt; ssl_certificate_key /etc/nginx/certs/idoubi.cc.key; ssl_session_timeout 5m; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_prefer_server_ciphers on; location / { root /data/code/idoublog/public; index index.html index.htm; } error_log /etc/nginx/logs/idoubi.cc.error; } server { listen 80; server_name idoubi.cc; return 301 https://$host$request_uri; } </description>
    </item>
    
    <item>
      <title>在 Linux 系统通过源码安装 Protobuf</title>
      <link>https://idoubi.cc/notes/install-protobuf-in-linux/</link>
      <pubDate>Fri, 04 Jun 2021 11:35:59 +0800</pubDate>
      
      <guid>https://idoubi.cc/notes/install-protobuf-in-linux/</guid>
      <description>打开源码下载页  https://github.com/protocolbuffers/protobuf/releases
下载源码  wget https://github.com/protocolbuffers/protobuf/archive/refs/tags/v3.17.2.tar.gz tar -zxvf v3.17.2.tar.gz 编译安装  cd protobuf-3.17.2 ./autogen.sh ./configure make &amp;amp;&amp;amp; make install 查看版本  安装完成，通过 protoc --version 查看版本，可能会报错：protoc: error while loading shared libraries: libprotobuf.so.28: cannot open shared object file: No such file or directory
解决办法：修改环境变量
export LD_LIBRARY_PATH=/usr/local/lib</description>
    </item>
    
    <item>
      <title>在 Linux 系统通过源码安装 Python3</title>
      <link>https://idoubi.cc/notes/install-python-in-linux/</link>
      <pubDate>Fri, 28 May 2021 10:29:34 +0000</pubDate>
      
      <guid>https://idoubi.cc/notes/install-python-in-linux/</guid>
      <description> 打开 python 源码下载页  https://www.python.org/ftp/python/
下载源码  wget https://www.python.org/ftp/python/3.9.5/Python-3.9.5.tgz 解压缩  tar -zxvf Python-3.9.5.tgz 安装  cd Python-3.9.5 ./configure --prefix=/usr/local/python3 make &amp;amp;&amp;amp; make install 设置环境变量  export PATH=$PATH:/usr/local/python3/bin 备份原来版本  python --version pip --version which python which pip mv /usr/bin/python /usr/bin/python2.7.5 mv /usr/bin/pip /usr/bin/pip2.7.5 使用新版本  ln -s /usr/local/python3/bin/python3 /usr/bin/python ln -s /usr/local/python3/bin/pip3 /usr/bin/pip 查看新版本  python --version pip --version </description>
    </item>
    
    <item>
      <title>在 C&#43;&#43; 中使用第三方库</title>
      <link>https://idoubi.cc/notes/use-3rd-lib-in-cpp/</link>
      <pubDate>Wed, 26 May 2021 10:53:12 +0800</pubDate>
      
      <guid>https://idoubi.cc/notes/use-3rd-lib-in-cpp/</guid>
      <description>创建项目  mkdir demo cd demo 创建 cmake 工程  vi CMakeLists.txt
cmake_minimum_required(VERSION 2.8) project(demo) 引入第三方库  mkdir 3rd git clone https://github.com/fmtlib/fmt.git 3rd/fmt 链接第三方库  vi CMakeLists.txt
cmake_minimum_required(VERSION 2.8) project(demo) add_executable(demo main.cpp) add_subdirectory(3rd/fmt) target_link_libraries(demo fmt) 编写业务逻辑  vi main.cpp
#include &amp;lt;fmt/core.h&amp;gt; int main() { fmt::print(&amp;#34;Hello, world!\n&amp;#34;); } 项目编译  cmake . make 项目运行  ./demo 可以看到控制台输出：
Hello, world!</description>
    </item>
    
    <item>
      <title>在 Linux 系统通过源码安装 Go</title>
      <link>https://idoubi.cc/notes/install-go-in-linux/</link>
      <pubDate>Tue, 25 May 2021 11:19:43 +0800</pubDate>
      
      <guid>https://idoubi.cc/notes/install-go-in-linux/</guid>
      <description>安装旧版本的 Go  Go 语言是自举的，要安装新版的 Go 语言，需要依赖系统已有的 Go 语言环境。
在 Centos 中，我们可以通过 yum 来安装 Go 。
yum install -y go 安装完之后查看 Go 版本
go version 可以看到已安装的 Go 版本为： go version go1.15.5 linux/amd64
通过源码安装/更新最新版本的 Go  打开 Github 上的 go 发布页
https://github.com/golang/go/releases
复制发布包链接，在 Centos 下载源码文件
wget https://github.com/golang/go/archive/refs/tags/go1.16.4.zip 解压缩，并安装
unzip go1.16.4.zip mv go1.16.4 /usr/local/go1.16.4 export GOROOT=/usr/local/go1.16.4 cd $GOROOT/src ./all.bash 修改环境变量  export GOROOT=&amp;#34;/usr/local/go1.16.4&amp;#34;export GOPATH=&amp;#34;/data/code/go&amp;#34;export PATH=$PATH:$GOROOT/bin:$GOPATH/bin替换默认的 Go 版本  which go mv /usr/bin/go /usr/bin/go1.</description>
    </item>
    
    <item>
      <title>开发一款转换sql查询结果的vscode插件</title>
      <link>https://idoubi.cc/posts/vscode-extension-sqlresult/</link>
      <pubDate>Fri, 19 Mar 2021 16:23:08 +0800</pubDate>
      
      <guid>https://idoubi.cc/posts/vscode-extension-sqlresult/</guid>
      <description>背景 做开发的同事应该很多人有过类似的经历：运营同事找过来，让我们帮忙导一份用户下单的数据。
我们一般的操作流程是：登录跳板机，连上数据库，输入查询 sql，复制 sql 查询结果，发给运营同事。
sql 查询结果一般长这样： 我们把查询结果保存到一个 txt 文件，发给运营同事，以为万事大吉了。
结果运营同事回这么一句： 运营同事用 windows 系统的记事本打开这个 txt 文件，看到的格式是乱的，他们希望我们给到的是一个 csv 或者 excel 表格文件。
作为一个开发，我们可能会想，这种小事情，写个插件来搞定吧。
所以进入到了今天的主题：
开发一个 vscode 插件，将 sql 查询结果转换成表格形式，并保存为 csv 文件。
vscode 插件开发 vscode 插件开发的详细步骤我就不写了，贴一篇我看过的教程，有兴趣的同学可以移步 这里 去看。
 安装命令行  npm i -g yo generator-code
 创建插件  在终端执行 yo code，根据提示一步一步输入插件信息之后，我创建了一个目录名为 sqlresult 的插件。
vscode 打开插件目录，可以看到自动生成的插件文件结构长这样： 其中 package.json 是插件信息文件，src/extension.ts 是插件的主逻辑。
 定义插件子命令  修改 package.json ，定义一个保存文件内容到 csv 的命令： 在 src/extension.ts 文件里面注册命令，编写命令的运行逻辑：  插件调试  在编辑器按 F5，打开一个新的编辑器窗口调试插件功能。</description>
    </item>
    
    <item>
      <title>我写了一款企业微信机器人SDK</title>
      <link>https://idoubi.cc/posts/go-sdk-for-wework-robot/</link>
      <pubDate>Wed, 02 Dec 2020 10:51:34 +0800</pubDate>
      
      <guid>https://idoubi.cc/posts/go-sdk-for-wework-robot/</guid>
      <description>创建机器人 在企业微信选择一个群聊，右键点击添加机器人，即可创建一个具备基本消息推送能力的机器人。
下载SDK go get -u github.com/cutesdk/webot 机器人推送消息 使用机器人推送消息非常简单，只需要在创建完机器人之后，拿到机器人的 Webhook地址，使用 SDK 创建一个 Bot 对象，通过链式调用完成消息推送。
基本使用 package main import ( &amp;#34;github.com/cutesdk/webot&amp;#34; ) func main() { bot := &amp;amp;webot.Bot{ WebhookURL: &amp;#34;https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=b8f1e424-d48d-46cc-a2c7-d360c8e98b3d&amp;#34;, } bot.Text(&amp;#34;你好，我是机器人&amp;#34;).Send() } 运行上面的代码，添加了机器人的群就会收到消息：
发送 markdown 类型消息 mdmsg := `*这是一条Markdown消息* &amp;gt; 这是引用文本 - 这是列表1 - 这是列表2	` bot.Markdown(mdmsg).Send() 运行上面的代码，机器人会发送 markdown 消息：
发送带操作按钮的 markdown 消息 mdmsg := `这是一条带操作按钮的 Markdown 消息 &amp;gt; 请确认你要提交吗？` callbackID := &amp;#34;testwebot&amp;#34; actions := []webot.MsgAction{} actions = append(actions, webot.MsgAction{ Text: &amp;#34;确认&amp;#34;, Name: &amp;#34;acts&amp;#34;, Value: &amp;#34;confirm&amp;#34;, ReplaceText: &amp;#34;已确认&amp;#34;, Type: &amp;#34;button&amp;#34;, TextColor: &amp;#34;2EAB49&amp;#34;, BorderColor: &amp;#34;2EAB49&amp;#34;, }) actions = append(actions, webot.</description>
    </item>
    
    <item>
      <title>我写了一款跟PHP鸟哥一样的博客皮肤</title>
      <link>https://idoubi.cc/posts/my-new-hugo-theme-like-laruence/</link>
      <pubDate>Sun, 22 Nov 2020 12:23:45 +0800</pubDate>
      
      <guid>https://idoubi.cc/posts/my-new-hugo-theme-like-laruence/</guid>
      <description>我从2013年开始搭建自己的博客网站，最初用的 WordPress，买了一台云主机，下了一个 CMS 风格的皮肤，当初的网站长这样：
后来我学习了 Markdown 语法，接触了一些静态网站生成工具，就折腾着把原来的网站迁移到了 Hexo。自己动手写了一个皮肤，整成了这个样子：
后来慢慢的发现，使用 Hexo ，每次构建发布的时候太慢了，有时候换个皮肤，会遇到一大堆 js 报错，自己开发皮肤的时候也不太好调试。
然后接触到了 Hugo，Go 语言实现的静态站点生成器，号称“世界上最快的静态网站生成框架”，无论是内容生成速度还是开发效率都非常的高。
果断从 Hexo 换到了 Hugo。几乎没有什么迁移成本，把 markdown 文章拷贝一下，就直接跑起来了。
网站生成工具换了之后，接下来最重要的事情，就是要整一个好看的皮肤。 我上一个使用的皮肤长这样：
每隔一段时间，我都会觉得在用的博客皮肤不好看，然后就总想着换一个皮肤，在网上找一圈没有喜欢的就会自己写。
前阵子看到了 PHP鸟哥 的个人网站：
当时就被吸引了，我就喜欢这种简洁大气黑白配的风格。于是便有了把鸟哥的博客皮肤copy下来的想法。
还好 Hugo 的主题开发工作比较简单，官网文档很详细，差不多花了两个小时就把基本的页面写完了，又花了一个礼拜的时间做了一些优化。
最终写完了这个 Hugo 皮肤：hugo-theme-period。
为什么要叫 period，因为我发现鸟哥的网站用的 WordPress 的主题名字也叫 period，我做的是 wordpress-theme-copy-to-hugo 的工作，所以主题名称保持一致吧。
现在这款皮肤已经在我的个人网站：idoubi.cc 用上了，预览效果是这样：
我在这款主题支持了几个右侧的挂件，分别是
 [widget.about] 作者简介 [widget.projects] 开源项目展示 [widget.qrcode] 公众号二维码 [widget.categories] 文章分类展示 [widget.tags] 文章标签展示 [widget.links] 友情链接  如果你下载了我的这个主题，你可以根据自己的需求，配置对应的挂件。
这款皮肤已经在 Github 开源，地址在：https://github.com/idoubi/hugo-theme-period
我也把这款皮肤提交到了 Hugo 的官方主题仓库，等审核通过后就能在 Hugo官方主题商店 看到。
欢迎大家下载使用，给个Star。
More 还是要强烈推荐一波 Hugo，这真的是我用过的最好的一个开发工具。除了写静态网站，你还可以用它来写项目文档、API等，扩展性很强，文档非常友好。</description>
    </item>
    
    <item>
      <title>快速创建微信小程序</title>
      <link>https://idoubi.cc/posts/create-wxapp-quickly/</link>
      <pubDate>Mon, 19 Oct 2020 14:27:56 +0800</pubDate>
      
      <guid>https://idoubi.cc/posts/create-wxapp-quickly/</guid>
      <description>前言 做过微信小程序开发的朋友应该知道，微信提供了几种创建小程序的方式：
    个人类型 机构类型     微信官网注册 填写个人身份证、手机号等信息，扫码绑定个人微信 填写机构代码、法人手机号等信息，上传营业执照，需要法人微信扫码验证   公众号后台注册 不支持 复用已认证的微信服务号资质创建小程序，最多创建五个   第三方平台注册 不支持 利用微信第三方平台资质，快速创建小程序    对比一下这几种方式，我们发现：
如果要在微信官网申请小程序，需要填很多资料，并且需要为新注册的小程序绑定一个身份证、手机号、微信，很容易受到个人可创建小程序数量的限制。
如果复用公众号资质创建小程序，需要先有一个已通过微信认证的服务号，申请公众号认证的审核费用单次 300 元，每个公众号最多只能创建五个小程序。
如果用第三方平台创建小程序，需要有企业资质，在填写完企业的基本信息后发起创建小程序申请，企业法人的微信会收到创建小程序的通知，根据指引完成法人身份认证之后即可完成小程序的创建，绑定一个新的邮箱即可登录小程序管理后台。使用这种方式，目前来看没有小程序数量和创建人身份的限制。第三方平台快速创建小程序官方文档
在了解完这些规则之后，我们应该想到，如果有企业资质，创建小程序最好的办法就是利用第三方平台，基本上能够满足一个企业日常的小程序数量需求。
快速创建小程序功能体验 微信扫码进入小程序“极速申请”
微信授权完成登录
点击“新建申请”进入企业资料填写页
填写完企业资料，点击“申请注册小程序”
法人微信收到创建小程序的通知
完成法人身份验证
完成小程序创建申请
收到小程序创建成功通知
为新创建的小程序设置登录邮箱
至此，已经完成了一个小程序的创建，非常的快速方便。
再次进入”极速申请“小程序，可以选择已有的企业快速创建小程序 可以查看创建小程序的申请记录
问题解答 Q：使用第三方平台创建的小程序，还需要申请微信认证吗？
A：使用第三方平台创建的小程序，默认是已认证的小程序，具备企业认证小程序的完整功能，你只需要在验证完法人身份后给小程序设置登录邮箱，后续操作与其他方式申请的小程序一致。
Q：别人用我的企业信息申请创建小程序怎么办？
A：首先别人要知道你的企业信息，其次别人要知道你的手机号和微信号，就算别人知道了全部信息，提交创建小程序申请后，只有你的微信会收到创建小程序的通知，你可以选择不处理，24 小时后申请会自动失效。别人没办法用你的信息创建不属于你的小程序。
Q：我可以在“极速申请”小程序申请创建多少个小程序？
A：目前暂时没有限制，你可以添加任意多个属于你的企业，通过企业资质创建任意多个小程序。但是有个原则，小程序申请只能一个一个创建，必须要法人在微信端提交认证后，才能完成小程序的创建，在此期间，继续提交申请会提示失败。
Q：我有自己的第三方平台，可以实现类似的功能吗？
A：目前使用的第三方平台方是”任想程序“，如果你需要用自己的微信第三方平台来创建小程序，请联系微信：idoubicc，咨询定制开发。
功能体验 </description>
    </item>
    
    <item>
      <title>在「VS Code」搭建「C&#43;&#43;」开发环境</title>
      <link>https://idoubi.cc/notes/cpp-in-vscode/</link>
      <pubDate>Sat, 25 Jul 2020 12:29:30 +0800</pubDate>
      
      <guid>https://idoubi.cc/notes/cpp-in-vscode/</guid>
      <description>大家都知道「VS Code」是一个“真香”编辑器，用来做「C++」开发也是一样的香！
开始写 C++ 程序 第一次接触 C++，我们先不折腾编辑器的事情，随便用个能写代码的软件，写一个能输出“Hello World”的可执行程序再说。
在 Linux 机器上用 vi hello.cpp，先写几行代码：
#include &amp;lt;iostream&amp;gt;using namespace std; int main() { cout &amp;lt;&amp;lt; &amp;#34;Hello World&amp;#34;; return 0; } 安装 C++ 环境依赖
yum install gcc gcc-c++ 确保 gcc、g++ 用的同一个版本
/usr/bin/gcc -v /usr/bin/g++ -v 编译 C++ 程序
g++ hello.cpp -o hello 运行编译后的程序
./hello 如果看到如下输出，证明我们的 C++ 编码环境是 OK 的
$ ./hello Hello World# VS Code 编译/运行 C++ 代码 下面我们开始对 VS Code 进行一系列配置，用来做日常的 C++ 开发工作。</description>
    </item>
    
    <item>
      <title>使用「Air」实现热加载，助力「Go」项目开发调试</title>
      <link>https://idoubi.cc/posts/go-dev-with-air/</link>
      <pubDate>Sat, 25 Jul 2020 12:04:25 +0800</pubDate>
      
      <guid>https://idoubi.cc/posts/go-dev-with-air/</guid>
      <description>Go 是一种静态编译型语言，写完源代码后，需要编译成二进制可执行文件，才能运行程序看到相应的效果。我们在开发 Go 程序的过程中经常需要调试，如果没有热加载功能，这将是非常痛苦的一件事。
Air 是 Go 生态中一个可以实现热加载的库，在开发 Go 项目的时候引入 Air，可以很大程度上提升开发调试的效率。
安装Air go get -u github.com/cosmtrek/air 安装完成后，我们执行air -h可以看到Air的基本用法：
$ air -h Usage of air: -c string config path -d debug mode -v show version 热加载配置 在要开发的 Go 项目目录下新建一个 .air.conf，写入基本的配置信息。
# Config file for [Air](https://github.com/cosmtrek/air) in TOML format # Working directory # . or absolute path, please note that the directories following must be under root. root = &amp;#34;.&amp;#34; tmp_dir = &amp;#34;tmp&amp;#34; [build] # Just plain old shell command.</description>
    </item>
    
    <item>
      <title>基于「Hugo」搭建个人博客网站</title>
      <link>https://idoubi.cc/posts/build-site-with-hugo/</link>
      <pubDate>Sun, 19 Apr 2020 22:11:23 +0800</pubDate>
      
      <guid>https://idoubi.cc/posts/build-site-with-hugo/</guid>
      <description>前言 搭建个人网站，以前我们一般会选择 WordPress，因为其使用范围广（据说全世界 80%的网站都是用它搭建的）、主题丰富、上手简单。
近年来，markdown 内容格式渐渐流行，我们更愿意使用 markdown 格式来写文章，写完后用静态网站生成工具把文章内容转换成 html 格式，再发布到个人网站。生成静态网站的工具中，比较优秀的有 Jekyll、Hexo、Hugo 几个。
简单比较一下动态网站框架 WordPress 与静态网站生成框架 Hexo、Hugo 的区别：
   项目 开发语言 优势 不便之处     WordPress php 1. 有可视化后台可以编写文章；2. 使用范围广；3. 主题、插件丰富。 1. 依赖过多导致加载较慢；2. 需要服务器部署，依赖数据库；3. 数据需要定时备份。   Hexo nodejs 1. 静态生成，SEO 友好；2. npm 生态有丰富的插件可用于扩展功能。 1. 本地编译生成静态文件速度较慢；2. 调试麻烦，经常遇到 js 报错。   Hugo go 1. 编译速度最快;2. 开发主题非常方便。 1. 目前主题数量较少。    综合来看，我还是比较推荐使用 Hugo 来搭建个人网站。
安装 Hugo MacOS 系统下，可以使用 brew 来进行安装。</description>
    </item>
    
    <item>
      <title>在个人博客实现「小课」系统</title>
      <link>https://idoubi.cc/posts/course-in-blog/</link>
      <pubDate>Wed, 15 Apr 2020 22:58:04 +0800</pubDate>
      
      <guid>https://idoubi.cc/posts/course-in-blog/</guid>
      <description>程序员这个行业，是一个终身学习的行业，经常会有新技术出现。我是一个很爱学习的人，喜欢尝鲜。每次想去学习一项新技术的时候，总是苦于找不到合适的入门教程。于是有了想自己写个小课系统的想法：希望能通过写一系列的文章，组织成一门小课，帮助想学习某项技术的同学快速入门。
有了这个想法之后，我开始准备搭建小课平台，一开始想的是做一个前后端分离的网站，后端用 Go 写 API，前端用 vue 写页面。
使用 vue + ElementUI 搭建出来的第一个版本长这样：
写完第一个版本之后，仔细想了一下，如果要写好这个小课系统的话，我还得做好几件事：
 写 API ，前后端进行数据交互 写 Markdown 编辑器，在线录入课程 做服务端渲染，做 SEO 优化  一想到这里，头开始有点大，第一个对外发布的小课系统，我希望能尽可能简洁，不管是写作，还是展示，都不要太复杂。而且最重要的一点，我希望能有更多人看到我的小课系统，也就是说 SEO 一定要好。
考虑到这些因素，我决定用静态博客生成系统 Hugo ，基于我的个人博客来完成小课系统的开发。
使用 Hugo 来开发，有这么几个好处：
 不需要写 Markdown 编辑器，基于本地的 md 文件即可生成文章 不需要使用数据库，课程数据都是 md 文件，维护成本低 不需要做 SSR 也能有很好的 SEO  但是也有几个不好的地方：
 纯静态网站，没有数据交互，要做付费订阅等功能不太好实现 每次写完文章，需要编译生成静态页面，再提交发布，比较麻烦  管他三七二十一，先撸一个版本出来再说。于是我就这么干了：
使用 Hugo 搭建了个人博客，采用了 notepadium 这个开源主题。在 Hugo 的 content 里面创建了一个 courses 的 section，并为这一类型的 section 新增了一个首页模板和阅读模板。
最终写成的效果：
写完发布上线，我把我之前写的两门小课都放上来了
 「VS Code」快速上手指南 分分钟上手「WeiPHP」插件开发  总结一下，我觉得 Hugo 是一个非常优秀的静态网站生成工具，功能非常强大，而且编译速度非常快，甩同类型的 Hexo 几条街。</description>
    </item>
    
    <item>
      <title>「goz」开源库，在Go中快速发起HTTP请求</title>
      <link>https://idoubi.cc/posts/goz/</link>
      <pubDate>Sat, 15 Feb 2020 16:50:37 +0000</pubDate>
      
      <guid>https://idoubi.cc/posts/goz/</guid>
      <description>goz 是一个用于在 Go 代码中快速发起 HTTP 请求的开源库， 部分实现参考了 PHP 流行请求库： guzzle
 安装 go get -u github.com/idoubi/goz 文档 API 文档地址: https://godoc.org/github.com/idoubi/goz
基本使用 package main import ( &amp;#34;github.com/idoubi/goz&amp;#34; ) func main() { cli := goz.NewClient() resp, err := cli.Get(&amp;#34;http://127.0.0.1:8091/get&amp;#34;) if err != nil { log.Fatalln(err) } fmt.Printf(&amp;#34;%T&amp;#34;, resp) // Output: *goz.Response } 查询参数  map 形式  cli := goz.NewClient() resp, err := cli.Get(&amp;#34;http://127.0.0.1:8091/get-with-query&amp;#34;, goz.Options{ Query: map[string]interface{}{ &amp;#34;key1&amp;#34;: &amp;#34;value1&amp;#34;, &amp;#34;key2&amp;#34;: []string{&amp;#34;value21&amp;#34;, &amp;#34;value22&amp;#34;}, &amp;#34;key3&amp;#34;: &amp;#34;333&amp;#34;, }, }) if err !</description>
    </item>
    
    <item>
      <title>使用「Go」语言开发命令行工具</title>
      <link>https://idoubi.cc/posts/create-a-cli-tool-in-macos/</link>
      <pubDate>Sat, 04 Jan 2020 16:50:37 +0000</pubDate>
      
      <guid>https://idoubi.cc/posts/create-a-cli-tool-in-macos/</guid>
      <description>使用 MacOS 做开发的朋友都知道，我们一般会使用 Homebrew 做软件包管理，经常会用到 brew install [soft] 来安装各种各样的命令行软件。今天通过一个百科查找的命令行工具（tellme）示例，我们来学习一下如何使用 Go 语言开发自己的命令行软件。
我们需要用到 cobra 这个 Go 模块来做命令行工具开发，这个开源库其实是对 Go 官方库 flag 的一个封装，可以简化获取参数的操作。
创建命令行项目  开启 Go Module  export GO111MODULE=on  安装 cobra 工具  go get -u github.com/spf13/cobra/cobra  创建命令行项目  # 创建项目目录 mkdir -p /data/idoubi/tellme &amp;amp;&amp;amp; cd /data/idoubi/tellme # 定义模块 go mod init github.com/idoubi/tellme # 初始化命令行项目 cobra init --pkg-name github.com/idoubi/tellme  检测运行  go run main.go -h 执行完上述操作后，如果控制台输出了帮助信息，证明我们的命令行项目创建成功了。
新建子命令  新建子命令  cobra add baike  编写业务逻辑  在生成的子命令文件 /data/idoubi/tellme/cmd/baike.</description>
    </item>
    
    <item>
      <title>「VS Code」打造类sublime的高颜值编辑器</title>
      <link>https://idoubi.cc/notes/vscode-sublime-theme/</link>
      <pubDate>Mon, 08 Jul 2019 21:43:33 +0000</pubDate>
      
      <guid>https://idoubi.cc/notes/vscode-sublime-theme/</guid>
      <description>用惯了 sublime 编辑器，最近因为实在忍受不了 sublime 的低性能，而决定转向vscode。然而 vscode 自带的主题并不能满足我对编辑器颜值的要求，幸好在网上找到一款类似 sublime 的皮肤，安装上之后有一种用 sublime 写代码的既视感。记录下来，分享给有同样需求的朋友。
安装主题 MacOS 系统按Command+Shift+P弹出命令框，输入Install Extensions进入扩展安装页面，搜索Monokai ST3和vscode-icons扩展并安装之。
点击编辑器左下角的设置图标，在Color Theme中选择Monikai ST3，在File Icon Theme中选择vscode-icons即可完整主题的设置。
或者也可以在User Settings中设置：
{ &amp;quot;editor.fontSize&amp;quot;: 16, &amp;quot;workbench.statusBar.visible&amp;quot;: false, &amp;quot;workbench.iconTheme&amp;quot;: &amp;quot;vscode-icons&amp;quot;, &amp;quot;workbench.colorTheme&amp;quot;: &amp;quot;Monokai ST3&amp;quot; } 更多主题 在这里还有更多好看的主题：vscode 主题下载
参考  知乎：求 vs code 主题推荐？ 2018 年最佳 VS Code 主题 干货 | 教你打造一款颜值逆天的 VS Code  </description>
    </item>
    
    <item>
      <title>「Mac」在iterm2中使用rzsz命令进行文件传输</title>
      <link>https://idoubi.cc/posts/mac-use-rzsz-in-iterm2/</link>
      <pubDate>Wed, 29 May 2019 09:24:19 +0000</pubDate>
      
      <guid>https://idoubi.cc/posts/mac-use-rzsz-in-iterm2/</guid>
      <description>在 Mac 系统中，我们常用的终端工具是 iterm2，有时候需要通过 ssh 连接上服务器，并在服务器上面通过 rz、sz 命令上传文件或下载文件到本地。要实现此场景下的需求，我们需要在服务器和本地分别配置 lrzsz 命令行工具。
服务器上安装 lrzsz 两种安装方式二选一
 yum 安装  yum install lrzsz  源码编译安装  cd wget http://www.ohse.de/uwe/releases/lrzsz-0.12.20.tar.gz tar zxvf lrzsz-0.12.20.tar.gz &amp;amp;&amp;amp; cd lrzsz-0.12.20 ./configure &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install 创建软连接
ln -s /usr/local/bin/lrz rz ln -s /usr/local/bin/lsz sz Mac 系统安装 lrzsz brew install lrzsz iterm2 传输配置 cd /usr/local/bin wget https://raw.githubusercontent.com/aikuyun/iterm2-zmodem/master/iterm2-send-zmodem.sh wget https://raw.githubusercontent.com/aikuyun/iterm2-zmodem/master/iterm2-recv-zmodem.sh chmod +x /usr/local/bin/iterm2-send-zmodem.sh /usr/local/bin/iterm2-recv-zmodem.sh 点击iTerm2/Preferences/Profiles/default/Advanced/Edit
添加配置
   Regular Expression Action Parameters Instant     rz waiting to receive.</description>
    </item>
    
    <item>
      <title>「Sublime」配置Go开发环境</title>
      <link>https://idoubi.cc/notes/sublime-go-dev/</link>
      <pubDate>Sat, 27 Apr 2019 17:01:52 +0000</pubDate>
      
      <guid>https://idoubi.cc/notes/sublime-go-dev/</guid>
      <description>安装GoSublime插件 GoSublime是在Sublimeb编辑器中开发Go语言必备的插件之一，提供Go源码编译、格式化、包自动导入等功能。之前可以通过Sublime的软件仓库直接安装，现在的版本已经搜不到这个插件了，我们需要通过源码进行安装。
 复制插件源码到Sublime包扩展目录  # 进入sublime插件目录 cd &amp;#39;/Users/mikemin/Library/Application Support/Sublime Text 3/Packages&amp;#39; # 下载GoSublime git clone https://github.com/DisposaBoy/GoSublime.git  安装Margo依赖  # 安装margo go get github.com/slene/margo # 配置margo cd GoSublime/src mkdir margo cp margo.sh/extension-example/extension-example.go margo/margo.go  GoSublime插件配置  { &amp;quot;env&amp;quot;: { &amp;quot;GOPATH&amp;quot;: &amp;quot;/data/go&amp;quot;, &amp;quot;GOROOT&amp;quot;: &amp;quot;/usr/local/opt/go/libexec&amp;quot; }, &amp;quot;fmt_enabled&amp;quot;: true, &amp;quot;fmt_cmd&amp;quot;: [ &amp;quot;goimports&amp;quot; ] }  在GoSublime插件中配置包自动导入前，请先确保安装了goimports工具。
 goimports工具安装与使用
 ctrl/command + s 保存文件时，编辑器会自动格式化代码并进行包的导入和删除。 ctrl/command + b 可调出控制台，对go代码进行编译、测试或直接运行。  </description>
    </item>
    
    <item>
      <title>「Hexo」设置代码语法高亮</title>
      <link>https://idoubi.cc/posts/hexo-highlight/</link>
      <pubDate>Sat, 27 Apr 2019 17:01:16 +0000</pubDate>
      
      <guid>https://idoubi.cc/posts/hexo-highlight/</guid>
      <description>在使用某个hexo主题的时候，我们有时候会觉得文章详情中的代码高亮显示的样式并不是很好看，通过下面的方式我们可以选择一套自己喜爱的代码高亮样式，让我们的文章阅读起来更有视觉触动。
 配置markdown渲染引擎  使用新的渲染引擎  npm un hexo-renderer-marked --save npm i hexo-renderer-markdown-it --save  在_config.yml中配置渲染参数  markdown: &#39;commonmark&#39;  重新预览  hexo clean hexo s --draft 配置代码高亮  设置code-prettify  # 下载源码 git clone https://github.com/google/code-prettify.git # 拷贝样式 cp code-prettify/src/prettify.css hexo/themes/hyde/source/css/ cp code-prettify/src/prettify.js hexo/themes/hyde/source/js/  设置皮肤  # 下载源码 git clone https://github.com/jmblog/color-themes-for-google-code-prettify.git # 拷贝样式 cd color-themes-for-google-code-prettify/dist/themes cp tomorrow-night.min.css hexo/themes/hyde/source/css/  禁用默认的高亮设置  # 修改_config.yml highlight: enable: false line_number: false auto_detect: false tab_replace: false  在主题模板文件中设置高亮  # head标签里引入css &amp;lt;%- css(&#39;css/prettify.</description>
    </item>
    
    <item>
      <title>「微信开发」本地调试指南</title>
      <link>https://idoubi.cc/posts/wechatdev-local-debug/</link>
      <pubDate>Thu, 18 Apr 2019 22:20:10 +0000</pubDate>
      
      <guid>https://idoubi.cc/posts/wechatdev-local-debug/</guid>
      <description>前言 在微信公众号的开发模式下，接口配置的URL必须是一个外网地址，这就要求我们在开发调试的时候，必须登录服务器去打一些断点信息，经常一言不合就出现“该公众号提供的服务出现故障，请稍后再试”这种错误提示。
我们希望能有一种解决方案，可以把一个外网地址映射到本地的开发环境，能够实时捕捉到微信公众号发送过来的调试信息，便于我们快速定位问题，完成功能开发。
网上有很多解决方案，比如使用花生壳、ngrok等产品提供的内网穿透技术，实现外网域名到本地开发环境的映射，详情可自行Google。
本文介绍一种对开发者友好，相对简洁的本地开发调试方式。
微信本地开发调试  准备工作   一个外网域名 一台有公网ip的服务器   把外网域名解析到服务器  例如：wx.idoubi.cc 119.29.201.62
 修改服务器sshd配置  # 打开配置文件 vi /etc/ssh/sshd_config # 修改配置参数 GatewayPorts yes # 重启sshd服务 service sshd restart  本地连接服务器  # 打开终端，通过ssh隧道连接服务器 ssh -NTf -R 8089:127.0.0.1:8080 root@119.29.201.62  在服务器查看本地连接的端口是否已监听  telnet localhost 8089  在服务器nginx设置域名转发  server { listen 80; server_name wx.idoubi.cc; location / { proxy_pass http://127.0.0.1:8089; proxy_set_header host $http_host; } }  在本地配置开发路径  server { listen 8080; server_name 127.</description>
    </item>
    
    <item>
      <title>Mysql百万级数据迁移实战笔记</title>
      <link>https://idoubi.cc/legacy/mysql-data-migration/</link>
      <pubDate>Sat, 30 Jun 2018 20:34:20 +0000</pubDate>
      
      <guid>https://idoubi.cc/legacy/mysql-data-migration/</guid>
      <description>背景 上个月跟朋友一起做了个微信小程序，趁着5.20节日的热度，两个礼拜内迅速积累了一百多万用户，我们在小程序页面增加了收集formid的埋点，用于给微信用户发送模板消息通知。
这个小程序一开始的后端逻辑是用douchat框架写的，使用框架自带的dc_mp_fans表存储微信端授权登录的用户信息，使用dc_mp_tempmsg表存储formid。截止到目前，收集到的数据超过380万，很大一部分formid都已经成功使用给用户发送过模板通知，起到了较好的二次推广的效果。
随着数据量的增大，之前使用的服务器空间开始有点不够用，最近新写了一个专门用于做小程序后台开发的框架，于是想把原来的数据迁移到新系统的数据库。买了一台4核8G的机器，开始做数据迁移。下面对迁移过程做一个简单的记录。 方案选择  mysqldump迁移  平常开发中，我们比较经常使用的数据备份迁移方式是用mysqldump工具导出一个sql文件，再在新数据库中导入sql来完成数据迁移。试验发现，通过mysqldump导出百万级量的数据库成一个sql文件，大概耗时几分钟，导出的sql文件大小在1G左右，然后再把这个1G的sql文件通过scp命令复制到另一台服务器，大概也需要耗时几分钟。在新服务器的数据库中通过source命令来导入数据，我跑了一晚上都没有把数据导入进来，cpu跑满。
 脚本迁移  直接通过命令行操作数据库进行数据的导出和导入是比较便捷的方式，但是数据量较大的情况下往往会比较耗时，对服务器性能要求也比较高。如果对数据迁移时间要求不是很高，可以尝试写脚本来迁移数据。虽然没有实际尝试，但是我想过大概有两种脚本方案。
第一种方式，在迁移目标服务器跑一个迁移脚本，远程连接源数据服务器的数据库，通过设置查询条件，分块读取源数据，并在读取完之后写入目标数据库。这种迁移方式效率可能会比较低，数据导出和导入相当于是一个同步的过程，需要等到读取完了才能写入。如果查询条件设计得合理，也可以通过多线程的方式启动多个迁移脚本，达到并行迁移的效果。
第二种方式，可以结合redis搭建一个“生产+消费”的迁移方案。源数据服务器可以作为数据生产者，在源数据服务器上跑一个多线程脚本，并行读取数据库里面的数据，并把数据写入到redis队列。目标服务器作为一个消费者，在目标服务器上也跑一个多线程脚本，远程连接redis，并行读取redis队列里面的数据，并把读取到的数据写入到目标数据库。这种方式相对于第一种方式，是一种异步方案，数据导入和数据导出可以同时进行，通过redis做数据的中转站，效率会有较大的提升。
可以使用go语言来写迁移脚本，利用其原生的并发特性，可以达到并行迁移数据的目的，提升迁移效率。
 文件迁移  第一种迁移方案效率太低，第二种迁移方案编码代价较高，通过对比和在网上找的资料分析，我最终选择了通过mysql的select data into outfile file.txt、load data infile file.txt into table的命令，以导入导出文件的形式完成了百万级数据的迁移。
迁移过程  在源数据库中导出数据文件  select * from dc_mp_fans into outfile &amp;#39;/data/fans.txt&amp;#39;; 复制数据文件到目标服务器  zip fans.zip /data/fans.txt scp fans.zip root@ip:/data/ 在目标数据库导入文件  unzip /data/fans.zip load data infile &amp;#39;/data/fans.txt&amp;#39; into table wxa_fans(id,appid,openid,unionid,@dummy,created_at,@dummy,nickname,gender,avatar_url,@dummy,@dummy,@dummy,@dummy,language,country,province,city,@dummy,@dummy,@dummy,@dummy,@dummy,@dummy,@dummy,@dummy,@dummy); 按照这么几个步骤操作，几分钟内就完成了一个百万级数据表的跨服务器迁移工作。
注意项  mysql安全项设置
 在mysql执行load data infile和into outfile命令都需要在mysql开启了secure_file_priv选项， 可以通过show global variables like &#39;%secure%&#39;;查看mysql是否开启了此选项，默认值Null标识不允许执行导入导出命令。通过vim /etc/my.</description>
    </item>
    
    <item>
      <title>小程序源码反编译实战笔记</title>
      <link>https://idoubi.cc/posts/get-wxapkg/</link>
      <pubDate>Thu, 31 May 2018 16:50:37 +0000</pubDate>
      
      <guid>https://idoubi.cc/posts/get-wxapkg/</guid>
      <description>最近在做微信小程序开发，看到一些做的比较有意思的小程序，想看一看他们的源码，于是研究了一下小程序源码反编译相关的技术。结合本次经历，总结如下。
手机root 要拿到小程序在手机上的源码包，需要有一台越狱的iphone或者一台拥有root权限的android机，正好我手里有一台闲置的小米4，就拿来用了，试过很多种方式给小米4root，差点搞成板砖机，一直在recorvy模式启动不了，最后尝试了小米官网的刷机方法，把系统刷成了开发版，完美root。
小米4刷机教程：https://www.miui.com/shuaji-305.html
手机刷机成功后，开启root权限，并打开USB调试模式
小米4开发版开启root权限：http://www.miui.com/thread-9625466-1-1.html
MIUI9开启USB调试：https://jingyan.baidu.com/article/49711c6196e728fa441b7c37.html
电脑操作 以MacOS操作系统为例，通过USB连接操作Android手机
 安装adb工具  在MacOS系统上可以通过brew安装adb工具
brew cask install android-platform-tools  手机连电脑  通过USB数据线将手机连接到电脑，并在手机端开启USB调试，通过下面的命令测试是否连接成功
adb devices 连接成功的情况下
 查看小程序源码  进入adb shell模式
adb shell 切换到root权限
su 进入小程序源码目录
先进入MicroMsg文件夹，通过ls命令查看文件夹，找到63c92a20722afef36b525ecb04706c15这样的文件夹（不同的微信登录用户，这个文件夹的名称不同），然后再进入appbrand/pkg目录
cd /data/data/com.tencent.mm/MicroMsg ls cd 63c92a20722afef36b525ecb04706c15/appbrand/pkg 查看小程序源码
可以先执行rm -rf ./*删除掉当前目录下所有缓存的小程序源码包，然后通过手机端点击进入需要获取源码的小程序，再执行ls -l即可看到最新操作的小程序源码包
rm -rf ./* ls -l 将小程序源码拷贝到手机SD卡
cp _1038319936_4.wxapkg /sdcard 新开一个终端窗口，将源码拷贝到电脑
adb pull sdcard/_1038319936_4.wxapkg /data/weapp/a.wxapkg  操作过程截图   反编译源码  下载nodejs版本的反编译工具并安装相关npm包
git clone https://github.com/qwerty472123/wxappUnpacker.git cd wxappUnpacker npm install esprima -g npm install css-tree -g npm install cssbeautify -g npm install vm2 -g npm install uglify-es -g 反编译小程序源码</description>
    </item>
    
    <item>
      <title>开源一款hexo工作室主题</title>
      <link>https://idoubi.cc/posts/hexo-theme-studio/</link>
      <pubDate>Tue, 15 May 2018 10:47:44 +0000</pubDate>
      
      <guid>https://idoubi.cc/posts/hexo-theme-studio/</guid>
      <description>项目地址 Github: https://github.com/mikemintang/hexo-theme-studio
项目截图 使用教程  安装 hexo  官网教程：https://hexo.io/zh-cn/docs/
安装 hexo-theme-studio 主题  git clone https://github.com/mikemintang/hexo-theme-studio.git themes/studio
安装主题所需依赖  npm install hexo-server hexo-browsersync hexo-renderer-jade hexo-renderer-stylus --save-dev
使用主题  修改 hexo 项目根目录下的_config.yml，设置theme: studio
预览主题  hexo s</description>
    </item>
    
    <item>
      <title>douchat 4.0 新版发布，助力小程序后台开发</title>
      <link>https://idoubi.cc/posts/douchat4-release/</link>
      <pubDate>Tue, 08 May 2018 16:50:37 +0000</pubDate>
      
      <guid>https://idoubi.cc/posts/douchat4-release/</guid>
      <description>douchat是什么 douchat（中文名：豆信）是一款专为微信开发而创造的php开源框架，具有简洁、高效、优雅等特点。
新版本功能 douchat V4.0.0版本主要新增了小程序开发支持，具体包括：
 插件新增Api控制器，可快速实现供小程序调用的接口 封装了小程序登录态管理逻辑，可以更快捷的实现小程序端用户登录逻辑 框架后台新增了小程序账号管理、小程序用户管理等功能 新增Wxapps目录，并添加了一个自带的Demo小程序模板  主要功能介绍 多账户管理 豆信后台支持创建多个用户，每个登录用户可以创建多个公众号和小程序账号。 多应用管理 豆信支持通过插件的形式来扩展系统的功能，每一个插件可以用于公众号h5页面访问，也可以为小程序应用提供接口。 开发友好 豆信封装了诸多对开发者友好的业务逻辑，让开发者能够更快速的实现自己的应用功能。
 视图工具  豆信封装的视图工具可以让开发者通过简单的几行代码快速实现管理后台对数据的增删改查操作。
 公众号功能封装  豆信封装了常用的公众号开发逻辑，比如微信支付、发送模板消息、企业付款等。使用豆信封装的逻辑进行开发，可以大大简化开发者的工作量。  小程序开发支持  豆信对小程序的登录态管理、用户信息更新等逻辑做了封装。  应用商城  相关资源  产品官网：http://douchat.net 代码仓库：https://github.com/mikemintang/douchat.git  </description>
    </item>
    
    <item>
      <title>基于go&#43;vue实现的golang每日新闻数据浏览与检索平台</title>
      <link>https://idoubi.cc/legacy/%E5%9F%BA%E4%BA%8Ego-vue%E5%AE%9E%E7%8E%B0%E7%9A%84golang%E6%AF%8F%E6%97%A5%E6%96%B0%E9%97%BB%E6%95%B0%E6%8D%AE%E6%B5%8F%E8%A7%88%E4%B8%8E%E6%A3%80%E7%B4%A2%E5%B9%B3%E5%8F%B0/</link>
      <pubDate>Tue, 09 Jan 2018 16:50:37 +0000</pubDate>
      
      <guid>https://idoubi.cc/legacy/%E5%9F%BA%E4%BA%8Ego-vue%E5%AE%9E%E7%8E%B0%E7%9A%84golang%E6%AF%8F%E6%97%A5%E6%96%B0%E9%97%BB%E6%95%B0%E6%8D%AE%E6%B5%8F%E8%A7%88%E4%B8%8E%E6%A3%80%E7%B4%A2%E5%B9%B3%E5%8F%B0/</guid>
      <description>介绍 gonews是基于go+vue实现的golang每日新闻浏览与检索平台
 项目地址： Github 线上Demo：GoNews 数据来源：GoCN每日新闻  项目截图 部署  获取新闻数据  git clone https://github.com/gocn/news /data/news  获取源码  go get -u github.com/mikemintang/gonews  解析数据  nohup gonews -d /data/news &amp;gt; /data/log/gonews.log 2&amp;gt;&amp;amp;1  启动Api  nohup gonews -a api -p 8017 &amp;gt; /data/log/gonews.log 2&amp;gt;&amp;amp;1 &amp;amp;  前端部署  cd $GOPATH/src/github.com/mikemintang/gonews/web npm install npm run build  Nginx配置  server { listen 80; server_name gonews.idoubi.cc; index index.html index.htm index.php; root /data/go/src/mikemintang/gonews/web; location /api { rewrite ^.</description>
    </item>
    
    <item>
      <title>SeasLog快速上手指南</title>
      <link>https://idoubi.cc/posts/seaslog%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B%E6%8C%87%E5%8D%97/</link>
      <pubDate>Sun, 10 Dec 2017 13:08:22 +0000</pubDate>
      
      <guid>https://idoubi.cc/posts/seaslog%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B%E6%8C%87%E5%8D%97/</guid>
      <description>什么是 SeasLog log 日志，通常是系统或软件、应用的运行记录。通过 log 的分析，可以方便用户了解系统或软件、应用的运行情况；如果你的应用 log 足够丰富，也可以分析以往用户的操作行为、类型喜好、地域分布或其他更多信息；如果一个应用的 log 同时也分了多个级别，那么可以很轻易地分析得到该应用的健康状况，及时发现问题并快速定位、解决问题，补救损失。
SeasLog是一个 C 语言编写的 PHP 扩展，提供一组规范标准的功能函数，在 PHP 项目中方便、规范、高效地写日志，以及快速地读取和查询日志。SeasLog 具备以下几个特点：
 高性能  SeasLog 使用 C 语言编写，并带有缓冲池的功能。每次写入的日志，是先写入到内存当中，当达到一定的数量时，才写入到文件当中。
 配置简单  SeasLog 的配置十分简单，甚至不需要配置就可以直接使用。
 功能完善，使用简单  支持日志级别 支持日志分模块存放 支持日志统计，分析
如何安装 SeasLog   SeasLog 源码下载地址：https://pecl.php.net/package/SeasLog
  SeasLog 源码安装过程（Linux）
  # 下载源码 wget https://pecl.php.net/get/SeasLog-1.6.9.tgz # 解压缩源码 tar -zxvf SeasLog-1.6.9.tgz # phpize工具生源码编译文件 cd SeasLog-1.6.9 phpize # 源码编译安装 ./configure make make install # 修改php.ini文件添加扩展 vi /path/to/php.</description>
    </item>
    
    <item>
      <title>golang实现RPC的几种方式</title>
      <link>https://idoubi.cc/posts/golang%E5%AE%9E%E7%8E%B0rpc%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Sun, 03 Dec 2017 11:45:26 +0000</pubDate>
      
      <guid>https://idoubi.cc/posts/golang%E5%AE%9E%E7%8E%B0rpc%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</guid>
      <description>什么是RPC 远程过程调用（Remote Procedure Call，缩写为 RPC）是一个计算机通信协议。 该协议允许运行于一台计算机的程序调用另一台计算机的子程序，而程序员无需额外地为这个交互作用编程。 如果涉及的软件采用面向对象编程，那么远程过程调用亦可称作远程调用或远程方法调用。维基百科：远程过程调用
用通俗易懂的语言描述就是：RPC允许跨机器、跨语言调用计算机程序方法。打个比方，我用go语言写了个获取用户信息的方法getUserInfo，并把go程序部署在阿里云服务器上面，现在我有一个部署在腾讯云上面的php项目，需要调用golang的getUserInfo方法获取用户信息，php跨机器调用go方法的过程就是RPC调用。
golang中如何实现RPC 在golang中实现RPC非常简单，有封装好的官方库和一些第三方库提供支持。Go RPC可以利用tcp或http来传递数据，可以对要传递的数据使用多种类型的编解码方式。golang官方的net/rpc库使用encoding/gob进行编解码，支持tcp或http数据传输方式，由于其他语言不支持gob编解码方式，所以使用net/rpc库实现的RPC方法没办法进行跨语言调用。
golang官方还提供了net/rpc/jsonrpc库实现RPC方法，JSON RPC采用JSON进行数据编解码，因而支持跨语言调用。但目前的jsonrpc库是基于tcp协议实现的，暂时不支持使用http进行数据传输。
除了golang官方提供的rpc库，还有许多第三方库为在golang中实现RPC提供支持，大部分第三方rpc库的实现都是使用protobuf进行数据编解码，根据protobuf声明文件自动生成rpc方法定义与服务注册代码，在golang中可以很方便的进行rpc服务调用。
net/rpc库 下面的例子演示一下如何使用golang官方的net/rpc库实现RPC方法，使用http作为RPC的载体，通过net/http包监听客户端连接请求。
$GOPATH/src/test/rpc/rpc_server.go
package main import ( &amp;#34;errors&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;net&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;net/rpc&amp;#34; &amp;#34;os&amp;#34; ) // 算数运算结构体 type Arith struct { } // 算数运算请求结构体 type ArithRequest struct { A int B int } // 算数运算响应结构体 type ArithResponse struct { Pro int // 乘积  Quo int // 商  Rem int // 余数 } // 乘法运算方法 func (this *Arith) Multiply(req ArithRequest, res *ArithResponse) error { res.</description>
    </item>
    
    <item>
      <title>protobuf快速上手指南</title>
      <link>https://idoubi.cc/posts/protobuf%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B%E6%8C%87%E5%8D%97/</link>
      <pubDate>Sat, 02 Dec 2017 14:08:15 +0000</pubDate>
      
      <guid>https://idoubi.cc/posts/protobuf%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B%E6%8C%87%E5%8D%97/</guid>
      <description>什么是 protobuf Google Protocol Buffer( 简称 Protobuf) 是 Google 公司内部的混合语言数据标准。
Protocol Buffers 是一种轻便高效的结构化数据存储格式，可以用于结构化数据串行化，或者说序列化。它很适合做数据存储或 RPC 数据交换格式。可用于通讯协议、数据存储等领域的语言无关、平台无关、可扩展的序列化结构数据格式。
如何安装 protobuf  在 github 获取 protobuf 源码，windows 系统可以直接下载 exe 文件：https://github.com/google/protobuf/releases   macos 和 linux 环境使用源码进行安装的步骤  # 获取源码包 wget https://github.com/google/protobuf/archive/v3.5.0.tar.gz # 解压缩并进入源码目录 tar -zxvf v3.5.0.tar.gz cd protobuf-3.5.0 # 生成configure文件 ./autogen.sh # 编译安装 ./configure make make check make install  在执行./autogen.sh过程中可能会因缺乏 automake 依赖库而报错：autoreconf: failed to run aclocal: No such file or directory，要解决此错误，在 linux 系统可以通过sudo yum install automake或者sudo apt-get install automake安装 automake，在 macos 系统可以通过brew install automake安装 automake。</description>
    </item>
    
    <item>
      <title>SQL2Struct：一款根据sql语句自动生成golang结构体的chrome插件</title>
      <link>https://idoubi.cc/posts/sql2struct%E4%B8%80%E6%AC%BE%E6%A0%B9%E6%8D%AEsql%E8%AF%AD%E5%8F%A5%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90golang%E7%BB%93%E6%9E%84%E4%BD%93%E7%9A%84chrome%E6%8F%92%E4%BB%B6/</link>
      <pubDate>Mon, 06 Nov 2017 10:47:44 +0000</pubDate>
      
      <guid>https://idoubi.cc/posts/sql2struct%E4%B8%80%E6%AC%BE%E6%A0%B9%E6%8D%AEsql%E8%AF%AD%E5%8F%A5%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90golang%E7%BB%93%E6%9E%84%E4%BD%93%E7%9A%84chrome%E6%8F%92%E4%BB%B6/</guid>
      <description>前言 最近在用 golang 写 api，用到 gorm 包进行数据库操作，gorm是 golang 中非常流行的一个 orm 包，使用 gorm 进行数据库操作前，一般需要先用一个 golang 结构体对数据表字段进行映射，于是我们经常需要根据数据表中的字段名和类型来手动在 go 代码中写 struct，有时候数据表字段很多的情况下，这种方式很耗费精力。于是便想到了写一个 chrome 插件，根据数据表的 DDL 语句来自动生成 golang 结构体，可以配置 go 结构体字段类型与 mysql 数据表字段类型的一个映射关系。
SQL2Struct  SQL2Struct 是一款对 golang 开发者友好的 chrome 插件，根据在 mysql 中创建数据表的 sql 语句，自动生成 golang 中的 struct，在 golang 开发者使用诸如 gorm 之类的框架时，可以很好的把 mysql 中的数据表与 orm 的结构体关联起来。
 github 地址：https://github.com/mikemintang/sql2struct
使用说明  下载源码  git clone https://github.com/mikemintang/sql2struct.git 安装扩展  打开扩展中心，选择上一步拉取到的插件源码，本地安装插件。
在 mysql 中获取生成数据表的 sql 语句  show create table users\G;</description>
    </item>
    
    <item>
      <title>goimports工具安装与使用</title>
      <link>https://idoubi.cc/posts/goimports%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 06 Nov 2017 10:40:16 +0000</pubDate>
      
      <guid>https://idoubi.cc/posts/goimports%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</guid>
      <description>goimports是干嘛的 go是一门强类型的编译型语言，有着很严格的类型约束与语法规范，在golang代码中，如果使用到的包没有被引入或者是引入了的包没有被使用，都会编译不通过。所以我们在写go代码的时候，用到包的时候需要首先import一下，不用的时候，要把import包的语句删除或者是注释，但是总是这样手动去操作并不是很方便，比如我们在开发的时候需要用fmt包打印一些调试信息，为了让打印出来的数组或结构体格式好看一点，我们有时候需要使用encoding/json包来进行格式化。在调试完成后，我们必须要手动把引入的包删除掉，然后再进行编译。
针对上面提到的日常开发中经常面对的手动管理包的问题，goimports出现了。goimports可以自动对代码中的依赖包进行管理，如果有用到，就会自动import，也会对没有用到的包进行自动删除。
安装goimports 因为被墙的原因，直接通过go get可能不能正确拉取到goimports包，我们这里使用github源码编译的方式进行安装。
 拉取github上面的tools包源码  git clone https://github.com/golang/tools.git /d/go/src/golang.org/x/tools 进入goimports命令包目录  cd /d/go/src/golang.org/x/tools/cmd/goimports 编译源码  go build 编译完成后，在windows下会生成goimports.exe可执行文件，在mac跟linux下的goroot配置的bin目录下会生成goimports可执行文件。如果设置了环境变量，在任意位置可执行goimports命令。
在sublime配置goimports 在sublime安装GoSublime插件，在插件用户配置文件中写入：
{ &amp;#34;fmt_cmd&amp;#34;: [&amp;#34;goimports&amp;#34;] } 配置完成后在sublime编写go代码时，每次ctrl+s保存文件或者ctrl+b编译文件时，goimports会自动执行并对go代码进行包依赖的检查，对于用到却未引入的包会进行自动引入，对于引入却未使用的包会进行自动删除。
在gogland中使用goimports gogland原生支持goimports，不需要进行额外的配置，保存或编译go代码时会自动进行包的依赖检查。</description>
    </item>
    
    <item>
      <title>golang版本的curl请求库</title>
      <link>https://idoubi.cc/posts/golang%E7%89%88%E6%9C%AC%E7%9A%84curl%E8%AF%B7%E6%B1%82%E5%BA%93/</link>
      <pubDate>Thu, 14 Sep 2017 21:31:55 +0000</pubDate>
      
      <guid>https://idoubi.cc/posts/golang%E7%89%88%E6%9C%AC%E7%9A%84curl%E8%AF%B7%E6%B1%82%E5%BA%93/</guid>
      <description>Github地址 https://github.com/mikemintang/go-curl
安装 go get github.com/mikemintang/go-curl 使用 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;github.com/mikemintang/go-curl&amp;#34; ) func main() { url := &amp;#34;http://php.dev/api.php&amp;#34; headers := map[string]string{ &amp;#34;User-Agent&amp;#34;: &amp;#34;Sublime&amp;#34;, &amp;#34;Authorization&amp;#34;: &amp;#34;Bearer access_token&amp;#34;, &amp;#34;Content-Type&amp;#34;: &amp;#34;application/json&amp;#34;, } cookies := map[string]string{ &amp;#34;userId&amp;#34;: &amp;#34;12&amp;#34;, &amp;#34;loginTime&amp;#34;: &amp;#34;15045682199&amp;#34;, } queries := map[string]string{ &amp;#34;page&amp;#34;: &amp;#34;2&amp;#34;, &amp;#34;act&amp;#34;: &amp;#34;update&amp;#34;, } postData := map[string]interface{}{ &amp;#34;name&amp;#34;: &amp;#34;mike&amp;#34;, &amp;#34;age&amp;#34;: 24, &amp;#34;interests&amp;#34;: []string{&amp;#34;basketball&amp;#34;, &amp;#34;reading&amp;#34;, &amp;#34;coding&amp;#34;}, &amp;#34;isAdmin&amp;#34;: true, } // 链式操作  req := curl.NewRequest() resp, err := req.</description>
    </item>
    
    <item>
      <title>八月书评二则</title>
      <link>https://idoubi.cc/legacy/%E5%85%AB%E6%9C%88%E4%B9%A6%E8%AF%84%E4%BA%8C%E5%88%99/</link>
      <pubDate>Sat, 26 Aug 2017 11:18:40 +0000</pubDate>
      
      <guid>https://idoubi.cc/legacy/%E5%85%AB%E6%9C%88%E4%B9%A6%E8%AF%84%E4%BA%8C%E5%88%99/</guid>
      <description>《不如去闯》  与其去想，不如去读； 与其去想，不如去问； 与其去想，不如去做； 与其去想，不如去闯。
 这是作者结合自己的奋斗经历在本书传达给我们的观点。
在上下班的地铁上，花了近五个小时的时间看完了这本《不如去闯》，深深被书中主人公的奋斗经历所吸引。作者Leo是典型的别人家的孩子，从小成绩优异，兴趣广泛，在高中关键时段放弃了保送大学的机会，闭关奋战耶鲁大学的本科申请，强大的意志力与决然的勇气令人敬佩。成功被耶鲁大学全奖录取后，Leo开始了他精彩的大学生活，在校园内，与各种牛人名师为伍，繁忙而充实。毕业后的Leo加入全球顶尖的投行高盛，让我们看到了他同样精彩的职场生活。两年后从高盛离职，Leo开始了创业，又继续进入哈佛商学院深造，精彩的人生一直在继续。
这是一本类似鸡汤却又能让我感受到作者独特性格魅力的书，作者以第一视角给我们展现自身奋斗历程的同时，传达了积极乐观的人生态度。在阅读本书的过程中，很多次引起了我的共鸣，想起了我过去几年的一些经历。
虽然在高中阶段没有作者那么明确的目标，最后我也实现了考上中国top10大学的梦想；大学四年学的是不喜欢的专业，业余时间自学了编程，毕业后进入了IT行业，做着自己喜欢的行业；这么些年一直很折腾，自己开公司创过业，也大大小小经历过很多事情。在阅读本书的过程中，每每联想到自己的经历，感触颇深。一直在想，如果时间倒回去几年，我是不是能够更努力一点，也像Leo一样，做更多有意思的事。
书中还提到了当下社会年轻人普遍面临的一些问题，比如迷茫，焦虑和重度手机依赖。作者都给出了自己独到的见解。一个有着强烈目标感，不安现状，总想着让自己变得更优秀的人，是很少会把时间浪费在这些问题上的。
看完这本书，我对自己过去几年的经历有了个对比性的认识，对以后要走的路有了更为清楚的规划，在欣赏他人精彩人生的过程中意识到自己的独特与不足，我想这是阅读传记或自传类书籍最大的收获吧。
 读书真的是一个很好的习惯，是一个可以受益终生的习惯。与其去想，不去去闯。
 与诸君共勉。
《做个快乐的读书人》 我在上下班的地铁上，花了两天时间，看完了这本《做个快乐的读书人》。
本书大部分篇幅，作者是以一个家长的姿态，教导孩子不要为了考试及其他功利性的目的而读书。读书应该是为了满足自己的猎奇心理，在书中汲取营养、收获感动。
作者呼吁大家积极写作，写作其实很简单，记述文应该善用“人事地时物”的文字组织方法，比如本点评开头的一句话。
本文还举例论述了家长的积极引导与鼓励对孩子创作的重要性。创作本应该有天马行空的想象力，家长要善于发现孩子潜在的能力并加以引导。
 做一个快乐的读书人，要以书为友，抱着交朋友的心态去读书。要有一颗猎奇的心，在书中发现新的世界，收获新的感动。
 </description>
    </item>
    
    <item>
      <title>开发一个自己的composer包</title>
      <link>https://idoubi.cc/legacy/%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84composer%E5%8C%85/</link>
      <pubDate>Mon, 21 Aug 2017 17:04:20 +0000</pubDate>
      
      <guid>https://idoubi.cc/legacy/%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84composer%E5%8C%85/</guid>
      <description>php的composer类似于node的包管理机制，都是可以通过一些命令操作下载开发者发布的功能包，并且包之间可以互相依赖，管理起来比较方便。下面根据自己踩过的坑总结一下如何创建一个自己的composer包。
 创建一个composer包 在packages目录下面创建一个自己的composer包：mikephp-db，composer.json里面填写包的基本信息，src目录下面是包的功能代码。
composer.json的内容
{ &amp;#34;name&amp;#34;: &amp;#34;mikephp/db&amp;#34;, &amp;#34;description&amp;#34;: &amp;#34;this is a libriary for db oprate&amp;#34;, &amp;#34;autoload&amp;#34;: { &amp;#34;psr-4&amp;#34;: { &amp;#34;Db\\&amp;#34;: &amp;#34;src/&amp;#34; } } }  包的名称叫：mikephp/db，一旦包发布到网上，其他开发者就可以通过composer require mikephp/db来下载使用这个包。autoload配置使用psr-4自动加载规范，把Db命名空间映射到包的src目录下
 Mysql.php的内容
&amp;amp;lt;?php namespace Db; class Mysql { public function __construct() { echo &amp;#39;this is mysql db&amp;#39;; } }  包的src下的功能文件都应该使用命令空间，如果功能文件在src的一级目录，例如src/Mysql.php，命名空间是Db，如果是二级目录，例如src/Pdo/Mysql.php，那么命名空间就应该是Db\Pdo，在使用功能类的时候就通过new Db\Mysql()或者Db\Pdo\Mysql()使用
 开发过程中调试创建的composer包 在把自己创建的composer包发布到网上供其他开发者使用前，我们需要不断调试以验证包的功能是否能正常使用。可以在项目不依赖composer包的前提下，通过配置autoload自动加载来关联开发中的composer包。下面的例子以composer为项目根目录，需要使用packages里面的正在开发的包。composer.json文件里面填写此项目需要依赖或者关联的包，如果有配置require，则在执行composer install或者composer update的时候，被依赖的包会被下载到vendor目录下。此处演示在项目根目录下通过autoload自动加载关联开发中的composer包，此情况下被关联的包不会被下载到vendor下。
composer.json的内容
{ &amp;#34;require&amp;#34;: { }, &amp;#34;autoload&amp;#34;: { &amp;#34;psr-4&amp;#34;: { &amp;#34;Db\\&amp;#34;: &amp;#34;packages/mikephp-db/src/&amp;#34; } } }  使用psr-4自动加载规范，把Db命名空间映射到自己创建的composer包的src目录下</description>
    </item>
    
    <item>
      <title>在php中使用curl多线程下载图片</title>
      <link>https://idoubi.cc/legacy/%E5%9C%A8php%E4%B8%AD%E4%BD%BF%E7%94%A8curl%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8B%E8%BD%BD%E5%9B%BE%E7%89%87/</link>
      <pubDate>Fri, 30 Dec 2016 10:25:39 +0000</pubDate>
      
      <guid>https://idoubi.cc/legacy/%E5%9C%A8php%E4%B8%AD%E4%BD%BF%E7%94%A8curl%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8B%E8%BD%BD%E5%9B%BE%E7%89%87/</guid>
      <description>遇到一个需求：要下载这个网站http://www.laredoute.com/上面的商品图片到本地。 分析了一下，这个网站是一个国外的站点，受 cdn 节点的影响，在国内打开的速度比较慢。另一方面，要下载的商品图片较大，单张图片的大小有超过 200kb 的。 现在的需求是，要在短时间内批量下载该网站上面的商品图片到本地，鉴于这两点考虑，如果使用 php 来做的话，单纯的用 file_get_contents 可能行不通，于是想到了用 php 的 curl 库来处理。
 虽然用 curl 来下载图片比起用 file_get_contents 来处理效率更高，稳定性更好，但是如果使用 curl 单线程来处理的话，效率并不会得到非常明显的提升。所幸的是，curl 库提供了 curl_multi 功能，让我们可以使用 curl 多线程来处理业务逻辑，可以显著的提升效率。下面拿下载上述站点上面的 8 张图片为例，分别使用 curl 单线程和 curl 多线程来进行图片下载，并对两者的效率做一个比较。
single.php：curl 单线程下载图片 &amp;lt;?php /** * 单线程下载远程图片 * @author 艾逗笔&amp;lt;765532665@qq.com&amp;gt; */ set_time_limit(300); // 设置程序执行超时时间为5分钟  // 要下载的图片数组 $pics = array( &amp;#39;http://media.laredoute.com/products/1200by1200/37/01/01/37010132_90_CO_1_2850804.jpg&amp;#39;, &amp;#39;http://media.laredoute.com/products/1200by1200/37/01/01/37010132_10_CO_2_2850799.jpg&amp;#39;, &amp;#39;http://media.laredoute.com/products/1200by1200/57/02/02/57020206_1_CO_1_057020206-9be173d2-6bc3-44ba-b9cb-111010ed0051.jpg&amp;#39;, &amp;#39;http://media.laredoute.com/products/1200by1200/37/01/01/37010132_10_CO_1_2850800.jpg&amp;#39;, &amp;#39;http://media.laredoute.com/products/641by641/35/00/42/350042687_1_CO_1_7639577.jpg&amp;#39;, &amp;#39;http://media.laredoute.com/products/641by641/35/00/34/350034174_1_CO_1_7669890.jpg&amp;#39;, &amp;#39;http://media.laredoute.com/products/641by641/35/00/42/350042718_1_CO_1_7009919.jpg&amp;#39;, &amp;#39;http://media.laredoute.com/products/641by641/35/00/39/350039748_1_CO_3_6958274.jpg&amp;#39; ); $beginTime = time(); // 开始下载图片的时间 $lastTime = $beginTime; // 上一次下载图片的时间 $count = 0; // 计数器 echo &amp;#39;begin download at &amp;#39; .</description>
    </item>
    
    <item>
      <title>聊一聊微信开发那些事儿</title>
      <link>https://idoubi.cc/legacy/%E8%81%8A%E4%B8%80%E8%81%8A%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</link>
      <pubDate>Wed, 02 Nov 2016 13:12:18 +0000</pubDate>
      
      <guid>https://idoubi.cc/legacy/%E8%81%8A%E4%B8%80%E8%81%8A%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</guid>
      <description> Programming make the world a better place, anyone can be anything
 前言 微信公众号2012年正式推出，至今已走过5个年头，在这五年的时间内，很多微信第三方企业迅速崛起，典型代表有微盟、微客来这些以公众号托管为主的企业。而今天我想跟大家聊的是微信公众号开发这个领域的一些事情。
经历 我是2013年末接触微信开发的，那时候还在上学，有朋友说想在学校搞一个微信公众号卖水果，于是我开始接触微信开发。最开始是看青龙老贼的教程入门的，后来接触到了github上面一个非常流行的类库wechat-php-sdk，再后来接触到了weiphp、微擎这样的开发框架，再到现在自己写的框架豆信，在微信开发这个领域已经走过了3个年头，期间开发过微商城、微餐饮、微投票等多款微信端应用，对于微信官方提供的接口算得上是滚瓜烂熟。
产品 最近这段时间，微信小程序（应用号）被炒的非常火，很多企业和个人都等着在下一个风口起飞，渐渐的就有些人不那么看好微信公众号了。作为一个纯技术爱好者，我不敢对公众号或者是小程序未来几年的市场情况和流行度做一个评价。单从开发的角度，给想接触微信开发的朋友介绍几款产品。
  wechat-php-sdk wechat-php-sdk是一个专门用于微信开发的类库，在github上面开源，有3000+的star，市面上很多与微信公众号相关的产品都有用到这个类库，其对微信官方提供的接口进行了高度封装，集成此类库后，在自己的应用中只需要简单的配置即可调用微信官方开放的诸多功能。对于产品形态不过度依赖微信，只想在自己的产品中简单集成微信端功能的开发者来说，可以选择此类库进行开发，此类库支持composer依赖安装。  weiphp 在搜索引擎上搜索微信开发框架，排在前面的几个产品中便有weiphp。weiphp是一个专门用于微信公众号开发的CMF系统（内容管理框架），基于onethink开发，支持通过插件来扩展功能，目前最新的版本是3.0。我是2014年夏天接触到weiphp的，花了差不多一年的时间，成为了weiphp社区最活跃的开发者，写了几篇**《分分钟上手weiphp插件开发》**系列教程，还录制过几个weiphp插件开发的视频。后来因为不是很喜欢weiphp框架的一些特性，便退出了weiphp的圈子。总的来说，weiphp的优点是上手容易、扩展方便、商业友好，自己改一改拿来给客户做做微信外包还是很方便的。缺点就是社区不够活跃，官方支持不够，产品迭代速度太慢。
  微擎 在我看来，微擎可以算得上是目前国内最成熟的微信开发框架，功能非常完善，开发者众多，社区活跃，官方应用商城拥有3000+的扩展功能，诸多的商业用户支持。我最开始接触微擎也是在2014年夏天，那时候在微擎与weiphp之间，我选择了后者，原因是因为微擎的开发文档内容太多，看起来有点摸不着头脑，觉得入门可能比较困难，便放弃了。后来看到微擎逐渐把开发者分成机制完善，很多做微擎的开发者在微擎的平台上获得了不菲的收入，心里多少感觉有点遗憾。对于想要选择微擎进行开发的开发者来说，有几点是需要考虑的。首先是微擎的框架相比于thinkphp、YII这种的主流框架来说，上手不是特别容易。再就是微擎的功能虽多，但是对于喜欢小而美，不需要集成过多微信端功能的产品来说，过多的封装显得不是很灵活。第三点，也是最重要的一点，安装微擎框架后需要连接云服务才能更新框架，并且需要购买商业版才能去除版权，对于喜欢商业友好，不愿意花钱买商业版的开发者来说，微擎可能不是最好的选择。
  豆信 豆信是一款专注于微信公众号开发的框架，基于thinkphp3.2.3开发而成，自主研发的插件扩展机制、模板视图工具使得豆信可以用来快速的集成微信公众号常用的功能。豆信官网的宣传语是“从未见过哪一款开发框架，如此这般简洁优雅”，虽然说的有点夸张，但是通读豆信源代码，可以在很多地方看到框架设计的优雅之处：核心源代码压缩后仅2.4M，真正的小而美；使用豆信封装的视图工具，20行以内的代码可以实现一个功能后台的增删改查；使用豆信封装的微信接口，三行代码可以搞定微信支付；高度集成wechat-php-sdk，能够灵活的处理微信端的各类消息；代码极其注重工整性，处处体现细节。豆信是一款商业友好的框架，基于apache2.0协议在github开源，官方提供社区支持与扩展服务。
   顺便提一句，豆信是我一个人独立开发的产品，虽然再说下去有王婆卖瓜的嫌疑，但是下面我还是想用几张图来简单介绍一下这一款优雅的微信开发框架。
  简洁 豆信是一个非常简洁的开源框架，对业务逻辑进行了高度封装，自主研发的视图构建工具大大简化了模板布局的工作，豆信核心文件的代码体积压缩后仅2.4M，功能完整性丝毫不亚于市面上已有的体积为几十M的框架。   高效 豆信引入了github上最为流行的wechat-php-sdk，对微信接口进行了高度封装，系统内核封装的微信交互Api能够对微信端发送的文本、语音、图片、位置、链接、短视频等类型的消息进行高效的处理，同时能够通过后台配置把用户关注、取消关注、点击菜单、上报地理位置、扫描带参数二维码等事件型消息分发到插件进行处理，这让微信交互处理变得非常灵活。   优雅 豆信是一个非常优雅的开发框架，非常注重代码的工整性、可复用性，和功能的实用性、易扩展性。通读豆信源代码，在很多地方都能看到注重细节的体现。   易扩展 豆信自主研发了一套插件扩展机制，可以把微信消息分发到插件进行处理，在插件中可以获取粉丝信息、自定义分享、发起微信支付、调用模板通知等。通过插件来扩展功能变得非常容易。   社区支持 为了让框架能够更加快速良好的发展，豆信提供了社区支持：http://bbs.douchat.cc/ 在豆信社区可看到豆信框架的更新动态、发布的扩展功能，也可以在这里提交豆信使用过程中发现的BUG、一些功能建议，还能跟所有的社区成员一起讨论、交流、分享你在开发或使用过程中的心得与感悟。   扩展服务 豆信云商城提供多款官方/开发者发布的插件，在这里你可以找到你想要的资源。    写在最后 </description>
    </item>
    
    <item>
      <title>AES加解密在php接口请求过程中的应用</title>
      <link>https://idoubi.cc/legacy/aes%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%9C%A8php%E6%8E%A5%E5%8F%A3%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</link>
      <pubDate>Tue, 25 Oct 2016 12:10:37 +0000</pubDate>
      
      <guid>https://idoubi.cc/legacy/aes%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%9C%A8php%E6%8E%A5%E5%8F%A3%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</guid>
      <description>在 php 请求接口的时候，我们经常需要考虑的一个问题就是数据的安全性，因为数据传输过程中很有可能会被用 fillder 这样的抓包工具进行截获。一种比较好的解决方案就是在客户端请求发起之前先对要请求的数据进行加密，服务端 api 接收到请求数据后再对数据进行解密处理，返回结果给客户端的时候也对要返回的数据进行加密，客户端接收到返回数据的时候再解密。因此整个 api 请求过程中数据的安全性有了一定程度的提高。
今天结合一个简单的 demo 给大家分享一下 AES 加解密技术在 php 接口请求中的应用。
AES 加解密基础类： &amp;lt;?php /** * 加密基础类 */ class Crypt_AES { protected $_cipher = &amp;#34;rijndael-128&amp;#34;; protected $_mode = &amp;#34;cbc&amp;#34;; protected $_key; protected $_iv = null; protected $_descriptor = null; /** * 是否按照PKCS #7 的标准进行填充 * 为否默认将填充“&amp;amp;#92;&amp;amp;#48;”补位 * @var boolean */ protected $_PKCS7 = false; /** * 构造函数，对于密钥key应区分2进制字符串和16进制的。 * 如需兼容PKCS#7标准，应选项设置开启PKCS7，默认关闭 * @param string $key * @param mixed $iv 向量值 * @param array $options */ public function __construct($key = null, $iv = null, $options = null) { if (null !</description>
    </item>
    
    <item>
      <title>浅谈shtml与html的区别</title>
      <link>https://idoubi.cc/legacy/%E6%B5%85%E8%B0%88shtml%E4%B8%8Ehtml%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Fri, 14 Oct 2016 10:04:29 +0000</pubDate>
      
      <guid>https://idoubi.cc/legacy/%E6%B5%85%E8%B0%88shtml%E4%B8%8Ehtml%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>遇到有人咨询 shtml 与 html 的区别，顺手查了一波资料，根据我的理解整理一下与大家分享。
 何为 shtml？  shtml 跟 html 类似，也是一种用于网页设计的标记型语言，区别在于：html 是一种纯静态的标记型语言，在 html 文档里面写的内容是什么，用户打开浏览器看到的就是什么，而 shtml 是一种半静态半动态的标记型语言，在 shtml 里面可以包含 SSI 命令，当用户在浏览器浏览 shtml 文档的时候，里面包含的 SSI 命令会被解析，然后再呈现内容给用户。
 何为 SSI？  SSI 是为 WEB 服务器提供的一套命令，这些命令只要直接嵌入到 HTML 文档的注释内容之中即可。例如： &amp;lt;!--#include file=&amp;quot;index.html&amp;quot;--&amp;gt; &amp;lt;!--#echo var=&amp;quot;DOCUMENT_NAME&amp;quot;--&amp;gt;都属于 SSI 指令。前者用于包含一个 html 文件，后者用于显示当前文档的名称。
 举例说明  新建一个 index.html 文件，并输入代码：   &amp;lt;!DOCTYPE HTML&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;了不起的盖茨比&amp;lt;/title&amp;gt; &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1&amp;gt;了不起的盖茨比&amp;lt;/h1&amp;gt; &amp;lt;p&amp;gt;1922年的春天，一个想要成名名叫&amp;lt;em&amp;gt;尼克。卡拉威&amp;lt;/em&amp;gt;的作家，离开了美国中西部，来到了纽约。那是一个道德感缺失，爵士乐流行，走私为王，股票飞涨的时代。为了追寻他的&amp;lt;span&amp;gt;美国梦&amp;lt;/span&amp;gt;，他搬入纽约附近一海湾居住。&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;菲茨杰拉德，二十世纪美国文学巨匠之一，兼具作家和编剧双重身份。他以诗人的敏感和戏剧家的想象为&amp;lt;strong&amp;gt;“爵士乐时代”&amp;lt;/strong&amp;gt;吟唱华丽挽歌，其诗人和梦想家的气质亦为那个奢靡年代的不二注解。&amp;lt;/p&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 在浏览器访问该index.html文档，将会显示成这样： ![1](http://blogcdn.idoustudio.com/2016/10/1.png)   新建一个 test.</description>
    </item>
    
    <item>
      <title>git常用命令整理</title>
      <link>https://idoubi.cc/legacy/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/</link>
      <pubDate>Mon, 21 Mar 2016 18:20:13 +0000</pubDate>
      
      <guid>https://idoubi.cc/legacy/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/</guid>
      <description>拉取分支代码：git clone -b [branch_name] [remote_url] 查看所有远程分支：git branch -a 查看本地分支：git branch 创建分支：git branch [branch_name] 切换到分支：git checkout [branch_name] 删除本地分支：git branch -d [branch_name] 删除远程分支：git push origin --delete [branch_name] 拉取远程分支：git fetch origin [branc_name] 合并本地分支：git merge [branch_name] 撤销合并：git reset --hard [commit_id] 重命名本地分支：git branch -m [old_branch_name] [new_branch_name] 丢弃未提交的更改：git clean -df 丢弃所有已commit的修改：git checkout . 将更改暂存：git stash 拉取代码: git pull 恢复暂存：git stash pop 将远程仓库与本地仓库关联：git remote add origin [remote_url] 删除远程仓库与本地仓库的关联：git remote rm origin 将本地的代码推送到关联的远程仓库：git push -u origin [branch_name] http://developer.</description>
    </item>
    
    <item>
      <title>使用Apache的ab工具进行网站性能压力测试</title>
      <link>https://idoubi.cc/legacy/%E4%BD%BF%E7%94%A8apache%E7%9A%84ab%E5%B7%A5%E5%85%B7%E8%BF%9B%E8%A1%8C%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Mon, 15 Feb 2016 09:06:02 +0000</pubDate>
      
      <guid>https://idoubi.cc/legacy/%E4%BD%BF%E7%94%A8apache%E7%9A%84ab%E5%B7%A5%E5%85%B7%E8%BF%9B%E8%A1%8C%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/</guid>
      <description>年前给中百仓促超市做了微信摇一摇抽奖的功能开发，顾客凭借在中百购物的发票联可以在微信中参与抽奖。由于中百仓储超市微信公众号的关注量较大，客户担心太多用户同时参与抽奖的话会导致服务器崩溃而不能给用户提供正常的服务，因此要求我们对中百仓促超市微信公众号接入的网站性能进行压力测试。下面总结一下使用 Apache 的 ab 工具进行压力测试的过程。
装了 wampserver 的情况下可以直接使用 ab 工具，win+R 后输入 cmd 弹出 dos 命令窗口，进入 wamp 的安装目录并且启动 ab 工具。
1000 请求，200 并发下的压力测试结果： 1000 请求，300 并发下的压力测试结果： 1000 请求，100 并发下的压力测试结果： 由上面的测试结果分析可知，这台服务器的最佳并发量应该控制在 100 以下。
参考资料：
如何使用 Apache 的 ab 工具进行网站性能测试：
http://jingyan.baidu.com/article/e3c78d647a57833c4c85f502.html
ab 压力测试 命令详解与结果分析：
http://lihuipeng007.blog.163.com/blog/static/121084388201082542924962/
压力测试所用工具下载：
wampserver：https://www.baidu.com/s?ie=UTF-8&amp;amp;wd=wampserver
测试程序：
&amp;lt;?php class Test { function yao($invoice, $mobile) { $key = &amp;#39;a63d590******190af93fe5387045795&amp;#39;; $corpid = &amp;#39;1**1&amp;#39;; $action = &amp;#39;check&amp;#39;; $tel = $mobile; $reciptnum = $invoice; $tmpArr = array($key, $corpid, $action, $tel, $reciptnum); sort($tmpArr); $tmpStr = implode($tmpArr); $sign = sha1($tmpStr); $url = &amp;#39;http://1************3:8001/lottery/ws/api/win?</description>
    </item>
    
    <item>
      <title>省市区三级联动js实现</title>
      <link>https://idoubi.cc/legacy/%E7%9C%81%E5%B8%82%E5%8C%BA%E4%B8%89%E7%BA%A7%E8%81%94%E5%8A%A8js%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Tue, 03 Nov 2015 12:53:27 +0000</pubDate>
      
      <guid>https://idoubi.cc/legacy/%E7%9C%81%E5%B8%82%E5%8C%BA%E4%B8%89%E7%BA%A7%E8%81%94%E5%8A%A8js%E5%AE%9E%E7%8E%B0/</guid>
      <description>接了一个广州电信微信公众号开发的单子，用户在兑换礼品的时候需要填写个人信息，这个时候需要用到省市区三级联动的功能。于是开始在网上找省市区三级联动的 js，终于找到一篇：http://www.cnblogs.com/zjfree/archive/2013/08/20/3269864.html
这是使用 QQ 网站用的 js 来实现省市区三级联动的，既然腾讯都用了，姑且我也用这个 js 吧。
下面讲一下使用过程：
复制一份生成省市区联动数据的 js： http://ip.qq.com/js/geo.js
将 js 文件上传到服务器项目目录下面： 在需要用到省市区联动的 html 页面引入该 js： &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;{:ADDON_PUBLIC_PATH}/js/geo.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; 给省市区联动的 select 分别添加 id：s1、s2、s3 &amp;lt;select name=&amp;quot;province&amp;quot; id=&amp;quot;s1&amp;quot; disabled=&amp;quot;disabled&amp;quot;&amp;gt; &amp;lt;option&amp;gt;&amp;lt;/option&amp;gt; &amp;lt;/select&amp;gt; &amp;lt;select name=&amp;quot;city&amp;quot; id=&amp;quot;s2&amp;quot;&amp;gt; &amp;lt;option&amp;gt;&amp;lt;/option&amp;gt; &amp;lt;/select&amp;gt; &amp;lt;select name=&amp;quot;area&amp;quot; id=&amp;quot;s3&amp;quot;&amp;gt; &amp;lt;option&amp;gt;&amp;lt;/option&amp;gt; &amp;lt;/select&amp;gt; 给 body 标签绑定 onload 事件用于初始化省市区 &amp;lt;body onload=&amp;quot;setup();preselect(&#39;陕西省&#39;);promptinfo();&amp;quot;&amp;gt; ok，这样就妥了。省市区三级联动完美实现。</description>
    </item>
    
    <item>
      <title>「Fiddler」网页采集必备抓包利器</title>
      <link>https://idoubi.cc/legacy/fiddler%E7%BD%91%E9%A1%B5%E9%87%87%E9%9B%86%E5%BF%85%E5%A4%87%E6%8A%93%E5%8C%85%E5%88%A9%E5%99%A8/</link>
      <pubDate>Fri, 19 Dec 2014 11:30:29 +0000</pubDate>
      
      <guid>https://idoubi.cc/legacy/fiddler%E7%BD%91%E9%A1%B5%E9%87%87%E9%9B%86%E5%BF%85%E5%A4%87%E6%8A%93%E5%8C%85%E5%88%A9%E5%99%A8/</guid>
      <description>最近这段时间，网页采集方面的工作做得比较多。用curl技术开发了一个微信文章聚合类产品，把抓取到的数据转换成json格式，并在android端调用json数据接口加以显示；基于weiphp做了一个掌上头条插件，也是用的网页采集技术；和一个创业团队一起在做一个高考志愿填报系统，所有的数据也是从别的地方抓取。总而言之，网页抓取与网页采集技术是一项非常实用的技能，他能让我们高效快速的获取我们开发产品所需要的一些基本数据。
网页抓取与网页采集过程中难免需要用到抓包技术，所谓抓包，就是我们在访问一个目标网站的时候，需要分析我们提交给浏览器的一些http请求以及提交给浏览器的一些数据，在知道请求是如何发起的以及post了哪些数据之后，我们才能针对目标网页写出相应的采集程序。特别是在模拟登陆一些需要用户进行登陆验证的网站时，抓包分析就变得很重要。
一些浏览器自带抓包分析工具或者有其可扩展的抓包插件，像火狐浏览器有firebug插件，IE浏览器有HttpWatch。每个抓包工具都有其独特的功能，这里就不一一介绍了，今天给大家介绍一个好用的抓包工具Fiddler。
一、下载地址： http://www.telerik.com/download/fiddler
二、基本介绍： Fiddler-百度百科
三、使用教程： Fiddler教程
四、补充介绍： 手机APP抓包
现在我们来结合一个具体的例子来讲一下如何抓包分析手机APP的请求数据，并达到自己的需求。我这里给大家讲一个LOL盒子的抓包实例。
我们知道，LOL盒子没有网页版，或者说网页版的功能并不像手机APP一样数据整合的那么齐全。如果我们要做一个微信版的LOL盒子，让用户在微信端回复一些关键词就能查看一些基本信息，比如用户在微信中回复“英雄”就能查看LOL全部的英雄信息，包括出装、符文之类的。那么我们想在微信端实现这些功能，肯定需要数据库的支持，如果我们的数据从LOL官网抓取的话，免不了要写很多匹配规则，所以一个简单高效的方法是直接抓取LOL盒子已经整合了的数据。那么正题开始，我们开始抓LOL盒子集成的全部英雄的数据。
1、首先在手机下载LOL盒子，并进入首页（请忽略我这个战五渣的战斗力指数）
2、打开Fiddler并点Remove all把抓包信息全部清除
3、在LOL盒子中点击英雄进入查看英雄页面
4、可以看到查看英雄页面有免费、我的英雄、全部三个选项
5、这时候我们可以看到Fiddler已经抓到我们需要的数据接口了
6、我们在其中一个数据接口上面点击右键，复制url地址并在浏览器中打开
7、就能看到我们需要的周免英雄的数据接口了，是json格式的
到此为止，抓包分析的整个流程大家一目了然了，得到了json接口之后，我们就能用curl技术把数据采集下来，并把json格式的数据转换成数组或者其他格式，然后就可以存到我们自己的数据库中了，当用户在微信中回复关键词时，我们就从数据库中取出相应的数据并回复给用户就行了。</description>
    </item>
    
    <item>
      <title>使用Xshell命令配置阿里云运行环境小结</title>
      <link>https://idoubi.cc/legacy/%E4%BD%BF%E7%94%A8xshell%E5%91%BD%E4%BB%A4%E9%85%8D%E7%BD%AE%E9%98%BF%E9%87%8C%E4%BA%91%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83%E5%B0%8F%E7%BB%93/</link>
      <pubDate>Fri, 19 Dec 2014 10:23:52 +0000</pubDate>
      
      <guid>https://idoubi.cc/legacy/%E4%BD%BF%E7%94%A8xshell%E5%91%BD%E4%BB%A4%E9%85%8D%E7%BD%AE%E9%98%BF%E9%87%8C%E4%BA%91%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83%E5%B0%8F%E7%BB%93/</guid>
      <description>1、配置服务器连接属性
2、下载一键安装包并放置在阿里云 root 目录下
3、输入安装命令
4、输入 cat account.log 命令查看安装软件登陆信息
5、进入 Xftp，将网站等应用放置在根目录即可
6、阿里云一键安装 web 教程及相关软件下载
linux_setup_1.4.1](http://blogcdn.idoustudio.com/2014/12/linux_setup_1.4.1.zip)
附：https://blog.linuxeye.com/31.html</description>
    </item>
    
    <item>
      <title>用SVN版本管理工具在本地对项目代码进行管理</title>
      <link>https://idoubi.cc/legacy/%E7%94%A8svn%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7%E5%9C%A8%E6%9C%AC%E5%9C%B0%E6%8E%A7%E5%88%B6%E4%B9%90%E4%BD%B3%E8%82%B4/</link>
      <pubDate>Tue, 21 Oct 2014 11:50:02 +0000</pubDate>
      
      <guid>https://idoubi.cc/legacy/%E7%94%A8svn%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7%E5%9C%A8%E6%9C%AC%E5%9C%B0%E6%8E%A7%E5%88%B6%E4%B9%90%E4%BD%B3%E8%82%B4/</guid>
      <description>对于一个程序开发人员来说，对代码的版本控制毫无疑问是一个非常关键的工作。因为一直都是一个人在写程序做产品，没有团队协作的概念，所以我以前做一些产品的时候基本上就是有了一个想法立马就去开始写程序了。没有写过需求文档，没有进行过市场调研，更没有规范化的开发进度控制、代码管理等，因此我以前做过的“武大微淘”、“凌波微购”、“厚德网”等产品的完整源代码现在都找不到了，有时候想起来还是觉得挺悲伤的。就拿“武大微淘”来说，我记得我是从 2014 年 2 月 15 号，也就是大三下学期刚开学开始，每天都去图书馆写程序，大概写了半个月才把“武大微淘”的基本功能写完，那时候的功能想想还是很不错的，虽然做的也是一个微信电商平台，但“武大微淘”相比于其他的微信购物类产品而言还是有很多亮点，比如说支持用户直接在微信中回复关键词查询商品分类、商品列表等，还有就是通过回复“商品编号+份数+地址”可以在微信中直接提交订单、管理员输入“查询+订单号”直接在微信中查看订单等。
如果可以的话我还是希望 能把以前做的一些产品的源代码找到，稍微修改一下还能继续使用，指不定还能卖给某些感兴趣的人。可惜的是以前图样图森破，不懂得对代码进行管理，导致现在想找都很难找到了。因此，以后开发什么产品一定要学会用代码管理工具，把每个版本的代码完整的保留下来。
ok。现在开始进入正题。分享如何在本地配置 SVN。
准备工作：
下载并安装 svn 服务器：http://www.visualsvn.com/server/download/
下载并安装 svn 客户端：http://tortoisesvn.net/downloads.html
与 SVN 配置相关的教程： http://www.cnblogs.com/elesos/archive/2012/12/09/2810449.html http://www.cnblogs.com/skyway/archive/2011/08/10/2133399.html
本地配置 SVN
1、在任意目录下新建 SVN 仓库 2、复制仓库地址 3、SVN 仓库创建成功 4、选择需要导入的项目文件夹 5、填写 SVN 仓库地址和项目版本信息 6、导入项目至 SVN 仓库 7、从 SVN 仓库到处项目至新的文件夹 8、填写 SVN 仓库地址及导出到的路径 9、导出项目源代码 10、用 SVN 进行管理 </description>
    </item>
    
    <item>
      <title>ajax在新闻资讯类产品中的应用</title>
      <link>https://idoubi.cc/legacy/ajax%E5%9C%A8%E6%96%B0%E9%97%BB%E8%B5%84%E8%AE%AF%E7%B1%BB%E4%BA%A7%E5%93%81%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</link>
      <pubDate>Fri, 17 Oct 2014 11:15:17 +0000</pubDate>
      
      <guid>https://idoubi.cc/legacy/ajax%E5%9C%A8%E6%96%B0%E9%97%BB%E8%B5%84%E8%AE%AF%E7%B1%BB%E4%BA%A7%E5%93%81%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</guid>
      <description>最近一直在做一款叫做“高校头条”的新闻资讯类产品，初衷是想通过数据抓取的技术把大学生最常浏览的新闻资讯类信息汇集到一起，通过一定的算法分析，根据用户的兴趣给他们推荐相应的内容。微信端产品已经上线一段时间了，目前在捣鼓安卓端需要怎么做，希望等安卓端做出来之后就开始推广给所有人用。
所谓的微信端“高校头条”，其实就是在微信中链接了一个 wap 站点，使用 bootstrap 做了一个移动端适配的前台，使用 weiphp 作为后台，通过在后台设置抓取地址和一定的抓取规则，使用 curl 技术抓取各个微信订阅号里面的内容，再把抓取到的内容存储到数据库，在 wap 站点直接输出数据库里面的新闻资讯信息，在微信端通过关键词查询获取相应的内容。整个产品的实现原理就是这样子，今天想要总结的一个技术是：通过 ajax 调用数据，在 wap 站点输出新闻列表。
AJAX 即“Asynchronous Javascript And XML[1] ”（异步 JavaScript 和 XML[1] ），是指一种创建交互式网页应用的网页开发技术。百度百科上是这么解释的。ajax 也是业内评价非常高的一种技术，一般功能较为完善的网站都或多或少使用了 ajax。ajax 最主要的特点是异步，使用异步最主要的作用是提高用户体验，也许我们会经常遇到，在点击某一个网站链接的时候，浏览器跳转半天都不能把我们想看的内容呈现出来，这时候网页浏览者的耐心肯定会受到很大的挑战，也就是所谓的用户体验极差。而使用 ajax 获取数据，一般网页是不会出现这种情况的，ajax 可以设置局部刷新，我们只要把需要通过点击链接而切换内容的区域设置成 ajax 获取数据就行了，这样用户点击某个链接的时候，网站是不会整体跳转的，也不会出现一片空白的情况，用户看到所需内容所等待的时间也非常少，很明显的提高了用户体验。
不知不觉废话又说了一大堆。现在要开始进入正题了。
先来看一下这两张图片。这是”高校头条“wap 网站上的新闻展示页面，导航栏我们分了”本校“、”考研“、”就业“、”创业“几个栏目。很明显我们希望用户点击每个栏目之后，下面会展示对应栏目下的新闻列表。在没学会 ajax 之前我是怎么做的呢？
&amp;lt;nav class=&amp;#34;table-responsive&amp;#34;&amp;gt; &amp;lt;table class=&amp;#34;table&amp;#34;&amp;gt; &amp;lt;tr&amp;gt;	&amp;lt;td&amp;gt;&amp;lt;if condition=&amp;#34;$column_id eq &amp;#39;&amp;#39;&amp;#34;&amp;gt;&amp;lt;a href=&amp;#34;{:U(&amp;#39;index&amp;#39;,array(&amp;#39;school_id&amp;#39;=&amp;gt;$school_id))}&amp;#34; class=&amp;#34;active&amp;#34;&amp;gt;&amp;lt;else/&amp;gt;&amp;lt;a href=&amp;#34;{:U(&amp;#39;index&amp;#39;,array(&amp;#39;school_id&amp;#39;=&amp;gt;$school_id))}&amp;#34;&amp;gt;&amp;lt;/if&amp;gt;本校&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt; &amp;lt;volist name=&amp;#34;columnList&amp;#34; id=&amp;#34;vo&amp;#34;&amp;gt; &amp;lt;td&amp;gt;&amp;lt;if condition=&amp;#34;$column_id eq $vo[&amp;#39;id&amp;#39;]&amp;#34;&amp;gt;&amp;lt;a href=&amp;#34;{:U(&amp;#39;index&amp;#39;,array(&amp;#39;column_id&amp;#39;=&amp;gt;$vo[&amp;#39;id&amp;#39;]))}&amp;#34; class=&amp;#34;active&amp;#34;&amp;gt;&amp;lt;else/&amp;gt;&amp;lt;a href=&amp;#34;{:U(&amp;#39;index&amp;#39;,array(&amp;#39;column_id&amp;#39;=&amp;gt;$vo[&amp;#39;id&amp;#39;]))}&amp;#34;&amp;gt;&amp;lt;/if&amp;gt;{$vo.column_name}&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt; &amp;lt;/volist&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;/table&amp;gt; &amp;lt;/nav&amp;gt; 就像上面代码看到的，我是对每个栏目设置一个&amp;lt;a&amp;gt;标签，然后点击每个栏目之后跳转到 index 方法，传递参数 school_id 或者 column_id 进行处理，然后在 index 方法中根据传递过来的参数去数据库中调用对应栏目下面的新闻，再把调用到的数据输出到前台页面显示。使用这种方法，用户每一次点击栏目时，都会跳转到 index 方法对应的模板 html，所以会在浏览器上看到一个圆圈来回转动（微信浏览器最新版是一条绿色的直线往右挺进）。如果网速慢一点的话，这样的浏览新闻的方式肯定会让用户奔溃，跳转半天看不到所需要的页面是很正常的事情。</description>
    </item>
    
    <item>
      <title>一个程序员关于订单打印的思考</title>
      <link>https://idoubi.cc/legacy/%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F%E5%91%98%E5%85%B3%E4%BA%8E%E8%AE%A2%E5%8D%95%E6%89%93%E5%8D%B0%E7%9A%84%E6%80%9D%E8%80%83/</link>
      <pubDate>Wed, 15 Oct 2014 15:04:17 +0000</pubDate>
      
      <guid>https://idoubi.cc/legacy/%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F%E5%91%98%E5%85%B3%E4%BA%8E%E8%AE%A2%E5%8D%95%E6%89%93%E5%8D%B0%E7%9A%84%E6%80%9D%E8%80%83/</guid>
      <description>乐佳肴台式茶餐屋 10 月 10 号开业以来，生意一直很好。我们在开业前几天就入驻了淘点点、美团外卖、乐外卖等系统。做外卖订餐的，我们肯定需要把用户下的订单打印出来然后再根据订单安排配送员给用户配送，前几天我对乐佳肴入驻的三个平台进行了调试，在淘宝上买了一个 58mm 无线蓝牙打印机，但是调试后发现只有美团外卖的订单能够打印出来，淘点点的订单打印不出来。淘点点指定的打印机好像是一款叫做“佳博”的无线打印机。乐外卖则在系统后台就指明了只能使用乐外卖提供的打印机才能打印在乐外卖平台上产生的订单，还给出了乐外卖打印机在淘宝上的购买链接，价格最便宜的 550 元，最新的 650 元。看到那个价格的时候我也是醉了。
作为一个自尊心很强的程序员，作为武汉凌波微购网络科技有限公司的首席技术官，我岂能眼睁睁的看着我们的乐佳肴花几百块钱去买三个不同的打印机分别适应我们入驻的三个平台？于是我想到了写一套统一的程序把三个平台的订单整合起来，用一个统一的打印机打印。
我最开始的想法是用模拟登陆技术，分别登陆淘点点、美团外卖、乐外卖三个系统的商家管理后台，然后用网页抓取技术把订单抓取下来存到本地的数据库，最后再调用打印机程序统一打印。不过后来发现淘点点跟美团外卖好像只有移动端的商家管理后台，没有 pc 端的，而乐外卖的管理后台登陆进去之后是一堆乱码，于是模拟抓取订单的这个想法行不通了。
然后我想到了三个平台接到订单的时候商家的手机都会接到订单提醒，淘点点跟美团外卖是直接在自己的 APP 中发出提示音并显示出订单详情，而乐外卖则可以设置短信通知和微信通知，商家在后台设置自己的接受信息后，只要一收到订单就会接到乐外卖发来的短信和微信，提示订单详情。然后我想到的是把这些通知类的订单详情复制粘贴并发送给一个微信号，由该微信号负责处理，并把内容插入到数据库，再从数据库中读取这些订单信息并进行打印。这样的话可能稍微麻烦一点，需要负责接收订单的商家人为的把三个平台的订单复制粘贴至同一个微信号，并统一打印。但是毕竟这种方法可以解决三个平台订单使用同一个打印机打印的问题。测试发现，淘点点跟美团外卖上面接到的订单不能复制，于是我只能处理乐外卖的订单了，毕竟写一个程序处理乐外卖系统产生的订单并用统一的打印机打印出来可以省去购买乐外卖打印机需要花费的 650 元，想想也是蛮有意义的。
ok，废话说了一大堆，现在开始进入正题，讲解如何写一套程序打印乐外卖平台产生的订单。
1、首先是在乐外卖后台设置接收订单的方式，我填写的是使用我的微信接收订单，所以每次用户下了订单，我的微信会马上接到订单提醒。 2、然后是把接收到的订单复制粘贴到一个微信公众号进行处理。本来想用最近申请的微信企业号进行处理的，但是因为企业号开发还没有学会，所以便临时使用了凌波微购公司的公众号进行处理。 3、处理订单的程序很简单，就是获取用户发送到微信公众号里面的内容，如果内容开头符合乐外卖订单开头的形式，就把用户发送的内容插入到数据库订单表中。如果用户发送的是”查看订单“，则跳转到查看订单的页面。 4、循环输出订单。基于 weiphp 的 MVC 模式来写数据输出程序要方便很多，简单的几行代码就把订单全部输出来了。 5、写一个刷新页面的程序，让页面每 5 秒钟刷新一次，便于获取最新的订单。 6、把这些准备工作做好之后，在查看订单的页面就能看到所有的订单信息了，页面每 5 秒钟刷新一次，在店面内负责接单的人就可以及时打印出订单了。 7、订单都显示出来了，现在就到了最关键的一步：把订单打印出来。从上图我们看到，每一条订单左上角都有 一个写着”订单“的按钮，点击那个按钮就能调出打印机预览页面。在输出订单的程序中，我们为每一个打印按钮设置一个 onclick 事件，为每一条订单设置一个唯一的 id，这样的话每次点击哪个订单的打印按钮，对应的订单就会被打印出来了。 打印订单的 js 函数 printdiv(printpage)中传递的参数是需要打印的订单 id，调用 window.print(); 能够打印出当前页面，所以在 window.print(); 前需要用 document.body.innerHTML = headstr+newstr+footstr; 设置当前页面内容。当前页面内容在打印之前设置了，打印之后不会自动恢复，所以在设置需要打印订单的当前页面内容之前我们先把原来的内容存储起来，等调用 windoe.print 打印出需要的内容之后再恢复以前的所有订单显示页面。
var oldstr = document.body.innerHTML; document.body.innerHTML = headstr+newstr+footstr; window.print(); document.body.innerHTML = oldstr; 8、把前面的工作都做好了，现在点击打印订单按钮就能调出打印机进行打印了。我这里用的是佳博的打印机，这个打印机是需要连接电脑的，不过价格挺便宜的，才 180 左右，所以用自己的智慧，配合一个 180 元的打印机，也能打印乐外卖的订单了，避免了购买乐外卖 650 元的打印机，为乐佳肴省掉了 470 元。感觉自己萌萌哒~请忽略我那乱得一笔的桌子。 整个订单打印程序开发流程到此处就哦了，总结几点： 1、作为一个程序员，一定要经常动脑筋，把自己学到的知识运用到实际场景中，能够创造价值。 2、实现某个功能能用的方法可能会有很多种，一种不行就试另一种，不要钻牛角尖。 3、一定要努力学技术，争取尽快开发出独立的线上订餐平台，功能不能亚于美团外卖、淘点点、乐外卖。 4、程序员的信仰：为改变世界而奋斗。</description>
    </item>
    
    <item>
      <title>阿里云服务器phpmyadmin无法登陆问题及其解决办法</title>
      <link>https://idoubi.cc/legacy/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8phpmyadmin%E6%97%A0%E6%B3%95%E7%99%BB%E9%99%86%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</link>
      <pubDate>Sun, 07 Sep 2014 12:38:13 +0000</pubDate>
      
      <guid>https://idoubi.cc/legacy/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8phpmyadmin%E6%97%A0%E6%B3%95%E7%99%BB%E9%99%86%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</guid>
      <description>比起一般的虚拟主机，阿里云服务器在访问速度和稳定性方面都有很突出的优势。我是半年前开始使用阿里云的，用的是最低的配置，55 块钱一个月，由于不懂得 Linux 服务器和 shell 编程，所以在买下阿里云服务器之后用的是阿里云官方提供的一键安装 web 服务。http://help.aliyun.com/view/13435438.html
使用一键安装 web 教程配置好的阿里云服务器使用起来还是挺方便的，就是偶尔会出现一些莫名其妙的问题，比如数据库登录不上，无法更改网站根目录之类的，可惜的是我不懂 linux 服务器，所以出现了什么问题只能求助别人或者各种百度，这样挺不方便的。看来要找个时间好好学一学 linux 服务器。
记录一下使用阿里云服务器以来遇到最多的数据库登录不上的问题及解决办法：
通过 xftp 操作阿里云服务器上的文件，提交表单的时候遇到断网，表单提交失败，再去提交的时候就提示数据库连接错误，这时候去访问 phpmyadmin 就会提示 2002 错误，百度解决办法的时候看到的都是说需要更改配置文件，把&#39;127.0.0.1&amp;rsquo;改成&amp;rsquo;localhost&amp;rsquo;之类的。http://www.jb51.net/article/30175.htm
仿照着去修改了配置文件之后，发现问题还是没有解决。于是用了阿里云的快照回滚，把文件恢复到早期的一个阶段。
快照回滚之后，阿里云恢复到早期的一个状态，重启系统之后再去访问网址，提示页面打不开。刚开始百度了好久都没找到解决的办法，最后实在搞不定了就求助了一个懂 linux 的小伙伴，才知道原来是阿里云系统重启之后需要重新启动服务。
简单的两行代码就把阿里云服务启动了，再去访问网站就妥了。
有时间一定要好好学习 linux 系统和 shell 编程。
 </description>
    </item>
    
    <item>
      <title>阿里2014实习生招聘前端开发笔试题</title>
      <link>https://idoubi.cc/legacy/%E9%98%BF%E9%87%8C2014%E5%AE%9E%E4%B9%A0%E7%94%9F%E6%8B%9B%E8%81%98%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AF%95%E9%A2%98/</link>
      <pubDate>Mon, 31 Mar 2014 19:24:29 +0000</pubDate>
      
      <guid>https://idoubi.cc/legacy/%E9%98%BF%E9%87%8C2014%E5%AE%9E%E4%B9%A0%E7%94%9F%E6%8B%9B%E8%81%98%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AF%95%E9%A2%98/</guid>
      <description>1、现有一个Page类，其原型对象上有许多以post开头方法（如postMsg）；另有一拦截函数check，只返回true或false。请设计一个函数，该函数应批量改造原Page的postXXX方法，在保留其原有功能的同时，为每个postXXX方法增加拦截验证功能，当check()返回true时继续执行原postXXX方法，返回false时不再执行原postXXX方法。
2、下面这段代码想要循环延时输出结果0 1 2 3 4 , 请问输出结果是否正确，如果不正确，请说明为什么，并请修改循环内的代码使其能输出正确结果。
for(var i= 0; i &amp;lt; 5; i++){ setTimeout(function(){ console.log(i+&#39; &#39;); }, 100); } 3、在不使用图片的情况下，实现图示的气泡框： 4、请简述用html5实现flappy bird的具体思路以及相关程序设计
5、实现一个jsonp方法，要求回调函数按照请求发出的顺序依次执行。
function jsonp(url, data, callback){ //此处省略一万字 } 调用方法：
for (var i = 0; i &amp;lt; 5; i++) { (function (index) { jsonp(&amp;quot;http://ju.taobao.com/api.php&amp;quot;,{ cat : 1000, page : 1 }, function(){ console.log(index); }); })(i); } 输出：0 1 2 3 4
6、有一个100项的数组，每一项是一个图片url，如http://test.com/a.jpg，里面有些图片无效了（404），请使用js去除这些无效图片url形成新的数组，数组顺序保持一致。可以借助框架，请写出代码，并说明你这段代码的优缺点？
7、请使用原生方法实现以下效果：
&amp;lt;div id=&#39;content&#39;&amp;gt; &amp;lt;div&amp;gt;1&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;2&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;3&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;4&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;5&amp;lt;/div&amp;gt; .</description>
    </item>
    
    <item>
      <title>你是否懂得我的坚持</title>
      <link>https://idoubi.cc/legacy/%E4%BD%A0%E6%98%AF%E5%90%A6%E6%87%82%E5%BE%97%E6%88%91%E7%9A%84%E5%9D%9A%E6%8C%81/</link>
      <pubDate>Thu, 20 Mar 2014 02:00:42 +0000</pubDate>
      
      <guid>https://idoubi.cc/legacy/%E4%BD%A0%E6%98%AF%E5%90%A6%E6%87%82%E5%BE%97%E6%88%91%E7%9A%84%E5%9D%9A%E6%8C%81/</guid>
      <description>开学一个多月了，去上课的次数加起来不超过五次，以至于昨天学委发短信警告我了。上次年级大会上辅导员说每年都有很多学生拿不到毕业证的时候我听着特别难受。上大学以前，我在班里的成绩一直都是前两名，高中连续五学期拿一等奖学金，数学竞赛湖南省一等奖，是很多人眼中的尖子生。大一一年虽然也没怎么学习，好歹成绩不算太差，那一年班里 30 个学生，我排 14。大一有一门期末考试给同学送了将近 60 分的助攻。
大一暑假，开始接触计算机，从最开始的 Photoshop 到后来的网页设计、网页编程再到现在的互联网创业，我一条路走到黑，与计算机结下了不解之缘。我深信我是一个自控能力比较强的人，无论做什么都不会过度沉迷，就像我吸烟，我喝酒，我打游戏，一切都只是浅尝辄止，一切都能自己控制。但是，我却败给了计算机。 曾经很喜欢一句话：计算机是一个疯狂的领域，正是因为其疯狂，才让激情有了生长的土壤。计算机着实令我疯狂，我可以为了写代码连续对着电脑十几个小时，我可以为了做产品连续翘课一个月，我可以为了做开发放弃我最爱的篮球，最宝贵的时间和最美好的爱情。
这一年来，得到了很多，也失去了很多。我从一个对电脑一窍不通的门外汉成为了一个能够熟练运用大部分开源系统二次开发的别人眼中的“大神”。而这所谓的“大神”在我自己的眼中和在真正的大神眼中依旧只是个门外汉。我承认我是一个聪明的人，我可以在很短的时间内看完一本几百页的编程书，我可以在简单接触 thinkphp 框架后直接拿来做微信开发，我可以将 wordpress、前台模板、sae 完美的结合起来做 blog，做 cms。我可以在网上随便找一个订餐系统来做我互联网创业的产品。这就是我的能力，广泛涉猎后能够汲取最有用的技术和知识用于实践之中。
然而我的这种能力并不能给我带来太大的帮助。我去应聘腾讯今年的暑期实习。无论是 web 前端还是网页重构，都是我感兴趣的并且我觉得适合我的职位。但是我却没有任何把握能通过第一轮的笔试。我是一个编程菜鸟，有时候连一个简单的字符串分割函数都要百度好久才能知道怎么写。做“武大微淘”微信版的开发，用的 thinkphp 框架，面向对象的思想，一共写了 800 多行代码，起码有一半以上都是百度出来的。很多功能只是知道应该通过什么步骤来实现，但是却不能完全自主的很快用代码写出来。这就是我，一个 IT 技术懂得特别多，但是编程技能特别差的“菜鸟”。 从换了现在这个手机以来，我坚持每天都看互联网新闻，知道了 BAT 之间的故事，知道了 whatsApp，Facebook，也了解了 o2o，大数据，自媒体。互联网江湖群雄角逐，多少互联网公司的大起大落尽在一夜之间。互联网是一个令人疯狂的领域，它能让你体验人生中太多的甜苦悲欢。
我开始接触互联网创业。我也想像马云一样用互联网思维来改变传统的行业。于是有了“武大微淘”，一个拥有电脑端，微信端，web app 三个版本的多功能购物平台。设计初衷我是希望我们学校每一个线下的店铺都能有一个线上展示平台，，哪怕只是一个在食堂门口摆点卖袜子的小摊。
为了做出精美的界面和完善的功能，我开始频繁翘课，每天十几个小时对着电脑做产品优化，不断的调 css 样式，哪怕是一条没人会注意到的分割线，我也会反复改好几次，做成我最想要的效果。我是一个完美主义者，有着很严重的强迫症，这个特点在产品优化方面给了我一定程度上的帮助，也浪费了我大量的时间。 “创业是艰辛的”。每天高负荷的工作，顶着巨大的压力和挂科的危险做产品开发，还要考虑团队的发展，业务的拓展，产品的运营。每天都有忙不完的事，天天半夜几点才能睡。朋友打来的电话一般是没时间接听的。这段时间确实很累。感觉不会再闲了。
有些朋友，相处久了就是一辈子的。从小玩到大的那几个小伙伴对我创业给了很大的支持，打个电话，简单的说几句，一个个立马跑银行给我转账，一天不到卡里多了三千块钱。确实让我很感动。一辈子很难有几个知己，在最困难的时候有你们，挺好。
创业的时候才明白团队的重要性。个人能力再强，事情一多就会手忙脚乱，往往也很难成功。有几个可以一起做事的小伙伴是件很幸福的事。翩翩、志勇、姗姐、泽新、微微、帅帅、存周都是很靠谱的伙伴，有你们一起，创业不孤单。
万事开头难，特别是做互联网这一块。“武大微淘”上线两个礼拜，用户数勉强突破 350，每日下单数却寥寥无几，依旧跟上学期一样，只能靠摆点卖夜宵来宣传，达到积累用户的目的。宿舍超市也只有班里的几个同学经常光顾。项目投入了几千块仍然没有看到方向，有时候真觉得迷茫。但是想到伙伴们这么些天的付出，实在不好意思就这么放弃，只能坚持做下去，因为只有坚持了，才有可能看到希望。 梦想注定是孤独的旅行，路上少不了质疑和嘲笑。这一个月来我也不知道究竟获得了什么，但如果再给我一个月时间，还是会一样的坚持。大学生创业，失败者十有八九，我也不敢说我一定能成功，但我知道我必须要坚持去做。泽新说，我们这个平台至少能存留十年，我想，也许这就是我坚持的理由。亲手孕育的产品，就得让它完美的保留下去。</description>
    </item>
    
    <item>
      <title>关于asp网站本地开发环境的配置</title>
      <link>https://idoubi.cc/legacy/%E5%85%B3%E4%BA%8Easp%E7%BD%91%E7%AB%99%E6%9C%AC%E5%9C%B0%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 20 Jan 2014 22:49:29 +0000</pubDate>
      
      <guid>https://idoubi.cc/legacy/%E5%85%B3%E4%BA%8Easp%E7%BD%91%E7%AB%99%E6%9C%AC%E5%9C%B0%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E9%85%8D%E7%BD%AE/</guid>
      <description>采用不同的语言开发网站所需要的开发环境也会有所不同，php 网站开发环境需要 apache 作为服务器，一般用 mysql 数据库，对于 php 的开发环境配置一般人会选择集成环境包，比如 wampserver 之类的，可以省去很多力气。jsp 网站需要 tomcat 作为服务器，一般用 mysql 或者 sql server 数据库，开发环境的配置需要配置环境变量什么的，过程有点繁琐。而 asp 网站一般是用 IIS 作为服务器，windows 系统一般自带 IIS 服务，但是开发环境需要自己配置。
下面主要讲一下 asp 开发环境的配置步骤。
1、打开或关闭 windows 功能
单击 开始-&amp;gt;控制面板-&amp;gt;程序和功能-&amp;gt;打开或关闭 windows 功能
在 internet 信息服务那个选项上打勾（把下面的子目录也全部勾上） 然后点确定，过几分钟就好了。
2、配置 IIS 管理器
单击 开始-&amp;gt;控制面板-&amp;gt;管理工具-&amp;gt;Internet 信息服务(IIS)管理器
打开 Internet 信息服务(IIS)管理器面板 接下来再经过四步设置就完成了 asp 开发环境的配置
a、双击 Internet 信息服务(IIS)管理器面板中的 ASP，进行两处配置，一处是配置将错误发送到浏览器为 true，第二处是启用父路径设置为 true b、双击默认文档，添加一个 index.asp 文档。 c、双击高级设置，选择 IIS 根目录对应的物理路径。 d、单击绑定，为 IIS 网站绑定主机名和端口。（默认端口为 80，如果电脑上配置了其他服务器比如 apache、tomcat 之类的，为了防止端口冲突，可以在这里给 IIS 网站配置一个端口。我平常一般 asp 网站和 php 网站一起开发，所以在这里给 asp 网站设置端口为 81，php 那里设置为默认的 80） 经过上面四个步骤，基本上 IIS 配置就差不多了，如果你的电脑是 64 位系统，还需要进行一处很重要的配置（妈蛋今天因为忘记配置这个了，搞得我的 asp 网站半天打不开。。。）</description>
    </item>
    
    <item>
      <title>仿Qzone登录页写的未来网后台登录界面</title>
      <link>https://idoubi.cc/legacy/%E4%BB%BFqzone%E7%99%BB%E5%BD%95%E9%A1%B5%E5%86%99%E7%9A%84%E6%9C%AA%E6%9D%A5%E7%BD%91%E5%90%8E%E5%8F%B0%E7%99%BB%E5%BD%95%E7%95%8C%E9%9D%A2/</link>
      <pubDate>Sat, 18 Jan 2014 23:03:01 +0000</pubDate>
      
      <guid>https://idoubi.cc/legacy/%E4%BB%BFqzone%E7%99%BB%E5%BD%95%E9%A1%B5%E5%86%99%E7%9A%84%E6%9C%AA%E6%9D%A5%E7%BD%91%E5%90%8E%E5%8F%B0%E7%99%BB%E5%BD%95%E7%95%8C%E9%9D%A2/</guid>
      <description>一个很简单的前台程序，背景图片直接用的 Qzone 登录页背景图，自己写了个 html 页面和几十行 css，写了一个常用的 js 切换 tab 功能，demo 页面放在 sae 上，用的是 thinkphp 框架。本来想实现模拟登录 Qzone 功能，但是 Qzone 的表单设置得比较巧妙，还没搞清楚应该怎样 post 数据，关于网页抓取和模拟登录的开发一定要抓紧时间学习，这是一个很关键的技术，武大助手就是用的模拟登录教务部管理系统的功能，我要是能尽快摸索出模拟登录的方法，这必定是极好的事情。 Qzone 登录页地址：http://i.qq.com/
HTML code：
&amp;lt;!DOCTYPE html PUBLIC &amp;#34;-//W3C//DTD XHTML 1.0 Transitional//EN&amp;#34; &amp;#34;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&amp;#34;&amp;gt; &amp;lt;html xmlns=&amp;#34;http://www.w3.org/1999/xhtml&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta http-equiv=&amp;#34;Content-Type&amp;#34; content=&amp;#34;text/html;charset=utf8&amp;#34; /&amp;gt; &amp;lt;link href=&amp;#34;style.css&amp;#34; rel=&amp;#34;stylesheet&amp;#34; type=&amp;#34;text/css&amp;#34; /&amp;gt; &amp;lt;title&amp;gt;用户登录&amp;lt;/title&amp;gt; &amp;lt;script type=&amp;#34;text/JavaScript&amp;#34;&amp;gt; &amp;lt;!-- function settab_zzjs(name,num,n){ for(i=1;i&amp;lt;=n;i++){ var menu=document.getElementById(name+i); var con=document.getElementById(name+&amp;#34;_&amp;#34;+&amp;#34;zzjs&amp;#34;+i); menu.className=i==num?&amp;#34;on_zzjs&amp;#34;:&amp;#34;&amp;#34;; con.style.display=i==num?&amp;#34;block&amp;#34;:&amp;#34;none&amp;#34;; } } //--&amp;gt;  &amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&amp;#34;logo&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;form name=&amp;#34;login_form&amp;#34; method=&amp;#34;post&amp;#34; action=&amp;#34;http://zhaopin.</description>
    </item>
    
    <item>
      <title>QQ空间魔力日志制作教程</title>
      <link>https://idoubi.cc/posts/qq%E7%A9%BA%E9%97%B4%E9%AD%94%E5%8A%9B%E6%97%A5%E5%BF%97%E5%88%B6%E4%BD%9C%E6%95%99%E7%A8%8B/</link>
      <pubDate>Fri, 27 Dec 2013 04:10:19 +0000</pubDate>
      
      <guid>https://idoubi.cc/posts/qq%E7%A9%BA%E9%97%B4%E9%AD%94%E5%8A%9B%E6%97%A5%E5%BF%97%E5%88%B6%E4%BD%9C%E6%95%99%E7%A8%8B/</guid>
      <description>看着日志图片上显示着自己的 QQ 头像、QQ 昵称、QQ 号码 是不是觉得很不可思议呢？是不是很想知道这些神奇的图片是怎么做出来的？ 那么接下来我就结合自己的经验给大家讲一讲这种魔力日志制作的原理和方法。
制作原理：
关于魔力日志的制作原理我就不详细说了，相信学过 php 的朋友都懂，上面的截图是网上给的解释，大家可以简单了解一下。看不懂也不要紧，没 php 基础也无所谓，请重点关注接下来的制作步骤。
制作步骤：
1、准备一张希望让别人看到的图片，可根据自己的创意自由发挥。例如：
做好图片之后那么接下来要做的就是怎么样把看到这张图片的人的 QQ 信息显示在这张图片上了。
2、下载源代码
源代码里面包含了上面的那张百度搜索的图片，命名为 qq.png，如果大家想制作其他的版本只要重新制作一张 qq.png 图片即可。
源代码下载地址：http://url.cn/WbjBGF
源代码目录结构： ip 文件夹：获取浏览者主机 ip，用于空间定位。 font 文件夹：字体包 do.php：关键文件，用于获取浏览者的信息，包括 QQ 昵称，QQ 头像，QQ 号，登录地址等信息。 content.php：内容文件，存放向浏览器输出的内容。 no.png：默认图片，即日志内容页里面的图片（别人点进去才会看到）。 qq.png：目标图片，即想要让别人看到的图片。
3、申请虚拟空间 要把做好的魔力日志图片发到空间让所有人看到，必须有一个虚拟空间，只有把代码和图片上传到空间，才能做出魔力日志。申请虚拟空间的方式有很多，有条件的朋友可以自己在网上买一个 php 空间，或者在网上找一个免费的 php 空间。这里推荐的是百度开发者空间。百度开发者空间申请流程：
http://jingyan.baidu.com/article/ceb9fb10ebf3f68cad2ba012.html 
4、测试服务器
按照第三步给的链接教程将代码上传到百度开发者空间之后，在浏览器输入网址http://1.idoubi.duapp.com/do.php即可看到上传代码中的 no.png 图片，注意网址不要输错，1 是你按照教程填写的版本号，我这里是 1，第三步中的教程里面写的是 0。idoubi 是我自己填的域名，每个人按照自己填的域名和版本号来输入网址。
如果能看到这张默认图片的话，证明服务器配置正确，接下来就可以去空间写日志了。
5、发表魔力日志
复制地址http://1.idoubi.duapp.com/do.php，在腾讯微博粘贴并广播（网上说可以直接用这个地址，但是我试了不行），生成短地址http://url.cn/Uy8PZJ。复制短地址。
进入自己的 QQ 空间写日志，插入图片，选择插入网络图片，输入在腾讯微博生成的短地址，添加，即可插入 no.png 这张网络图片。点击发表，魔力日志制作成功。 返回个人中心查看，即可看到根据浏览者对象生成的图片，形式为浏览者的 QQ 信息与 qq.png 图片组合（在源代码未修改情况下，qq.png 不起作用，这里的背景图是白色的）而成的一张图片。（由于浏览器缓存问题，发表日志后立刻回个人中心查看可能看到的还是 no.png 那张图片。这种情况下可以换个 QQ 进入空间看看效果。）</description>
    </item>
    
    <item>
      <title>那些年我们一起追的前端</title>
      <link>https://idoubi.cc/legacy/%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E4%BB%AC%E4%B8%80%E8%B5%B7%E8%BF%BD%E7%9A%84%E5%89%8D%E7%AB%AF/</link>
      <pubDate>Sun, 22 Dec 2013 12:14:14 +0000</pubDate>
      
      <guid>https://idoubi.cc/legacy/%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E4%BB%AC%E4%B8%80%E8%B5%B7%E8%BF%BD%E7%9A%84%E5%89%8D%E7%AB%AF/</guid>
      <description>大学加社团，最重要的还是能够找到自己感兴趣的某个点，找到一群志同道合的朋友，能够通过平时的工作学到技术，能够通过与人交流加深自己对各种事物的认识，这样就足够了。 ——题记
 又到了写述职报告的时候了。这是我第二次写，或许也是最后一次写了。最近这段时间一直很忙，累觉不爱。
今年 3 月份的时候我开始加入青传，最开始的目的是想在这里找到几个跟我一样热爱 IT 技术，可以一起奋斗，开发产品的人。刚开始在前端待的几个月没有收获什么，除了每两周会有一次培训，其余的时间基本上没有和部里同事接触的机会。期间接到过一次任务，就是设计一个与雅安地震相关的 banner，我当时设计了四种不同的风格，总体来说还不错，因此获得了当时的技术总监和部长的认可。
6 月份换届的时候我想去应聘软件开发部常务副部长，虽然我也喜欢 ps 设计，但是我最大的兴趣还是在于写代码开发网站。我是通过当时前端的一个副部长联系上了当时的软件开发部部长纪霖超，跟他说我想加入软开跟着大家一起写代码。他让我联系涂潜，也就是我们现在的 CTO。还表示暑假的时候技术中心的人会在工作间一起开发项目，叫我到时候跟着他们一起写。我当时的心情是很激动的，期待着暑假和大家一起奋斗的日子，然而最终这事也不了了之了。
当初我跟涂潜说我想加入软件开发部，他表示软件开发部常务副部长已经满员了，希望我能留在前端。我争取了很多次表明了我对写代码的热情，但还是没能得到涂潜的准确答复。记得面试的那天我打印了两张简历表，一张面试软件开发部常务副部长，另外一张面试前端设计部部长。临进工作间开始面试的时候我最终还是选择了前端，仔细想了想觉得技术中心应该是一个整体，就算我待在前端，我一样可以写代码。当时是这一届的主席团成员面试我的，主要是涂潜和张子路问了我几个问题，然后晚上的时候接到涂潜的电话，我就这样当上了前端设计部部长。
说起我跟青传的故事，其实要写的还有很多很多。
据我了解，百度百科上解释的前端设计部主要是负责网站前台设计，而青传最近这几届的前端部门大部分都是偏 ps 平面设计，往往是前端的人把未来网或者是其子网的效果图在 ps 中设计出来，切成片，然后发给软件开发部，那边的同事再负责把效果图用代码来实现，最终生成一个完整的网站页面。我当上前端部长之后，一直以正规的前端设计行业标准来要求我们部门成员，指导我们部门工作。以前的前端只要求会 ps 就行了，而我要求他们除了 ps，还要学 html、css、javascript 等，并且对于代码培训的重视程度也渐渐超过了 ps。一个学期下来，我们搞设计，也搞了开发。别的部门需要搞什么活动要求设计宣传品，一般都找我们部门帮忙，比如青传 2013 文化衫、青梅达人秀海报、青传全员大会喷绘之类的都是我们设计的，而后面的未来网改版、青传版校庆网站设计也都是我们在负责，我们不仅仅是做好网站上图片的设计，还用前端代码把我们做好的图片实现，做成标准网页的形式。因为时间比较紧，我们部门的技术水平有限等问题，新版未来网首页和校庆网站的都设计的差强人意，并没有得到其他同事的认可。但这学期我们前端渐渐的成了技术中心的核心部门，发挥着一个标准前端设计专业的作用，导致了软件开发部被架空。关于这一点，我不知道应不应该跟软开的勇哥说一句抱歉。毕竟我们做的是一个正规前端设计师所应该做的事，我也希望前端的这种工作性质能够一直秉承下去，我更希望大家明白：我们是搞前端设计的，不是平面设计。
在前端部长这个职位上，我觉得我算是合格的。我们这学期搞过几次培训，尽管每次培训的内容讲的都很浅，但几乎把我们搞前端设计所需要掌握的技能都过了一遍。我是一个很随和的人，不会过度强求别人去做什么事。上一届我待在前端的时候，上边有什么任务一般是一个电话打给我，开口就说我们要做一个什么什么，像素多少多少，什么时候之前做好。而我当部长的这段时间，上头的任务也很多，但是每次我让他们去做什么的时候我第一句话一般会问有没有时间，能不能帮忙做个东西，可以尽快做好不。每次培训、例会或者其他什么活动我也很少要求他们签到，愿意来的就来，不愿意来的我不会强求。例会的时候我经常跟他们说，大学加社团就是为了学东西、为了锻炼。自己感兴趣的事情就做，你不感兴趣的事，我绝对不会强迫你做，我不会给你们任何压力。可能由于我这种随和的性格导致我没有树立起来一个部长应有的威信，导致每次有什么活动我让他们自愿参加的时候，一般真正愿意去的人很少，最终会因为找不够人而尴尬。而对于部门的一些任务，往往也很少有人主动要求做，每次我都只能找那么几个固定的人帮忙。这一点确实是我应该要反思的问题。不知道 有没有什么方法能够让大家觉得待在前端部门很轻松，没什么压力，同时又能够很心甘情愿的去完成部门的一些任务。 在青传的这段时间，认识了很多有意思的人，也交到了很多朋友。我们部门的常副蔡凌波是国软院的学霸。平时比较忙，但是每次有什么事情我找她帮忙她都很热情，为我们部门的发展作出了很大的贡献，很感谢她。我们的副部长邱菊是个很不错的经管妹子，平时有什么工作我都交给她了，她也很用心的去完成，并且取得了不错的成绩，在这里也表示一下感谢。部委中也有很多可爱的人。孙杨是我们部门的技术大神，ps 软件玩的很溜，审美也很好，做出来的设计都有一种屌炸天的感觉，因此有什么设计方面的工作我也经常找他做。王利利是一个有点傻乎乎但是傻得很可爱的广东妹子，她那不标准的普通话往往能给我们带来很多欢乐，她对于部门的工作很有热情，培训、聚餐什么的都很主动参加，她说把我们都当成朋友，这一点让我很感动。总的来说，我们这一届前端的成员个个都很给力，我也希望大家能够在这里学到很多东西，不仅仅是技术，最重要的是一种团队协作的理念。
部门之外，我也认识了很多不错的青传人。范总是我很敬佩的主编，她是国软院的学霸，学着 IT，却热衷于传媒。有着留学英国的梦想。她很有商业头脑，有一个属于自己的工作室，平时也能接接外面的项目赚点外快什么的。范总是个很热情的人，每次和她聊完天我都能感受到一种正能量。当然，范总也很乐于助人，我这学期的两门选修课的作业都是她给我做的。呵呵。泽韬是技术中心少有的技术大神，虽然现在担任运维部长，但对前端、软开方面的知识了解的也很多，每次遇到什么技术上的困难我找泽韬帮忙他总能找到很好的解决办法。我很喜欢与这种技术型人才打交道，也很希望有一天我也能懂的跟他一样多。至于青传其他的同事，我知道肯定也有一大部分很优秀，由于平时私底下接触的比较少，所以也不怎么了解，很多人都是只是部长会的时候见一面，知道个名字，却没有进一步交往的机会，这一点有点遗憾。
总的来说，这学期在青传担任部长的日子里还是很开心的，不仅在技术上得到了提升，也认识了很多不错的青传人。对于青传这样一个传媒组织也有了一定的了解。套用我跟我们部门成员常说的那句话，大学加社团，最重要的还是能够找到自己感兴趣的某个点，找到一群志同道合的朋友，能够通过平时的工作学到技术，能够通过与人交流加深自己对各种事物的认识，这样就足够了。
大三以来，我似乎一直很忙。担任的职务很多也很杂：青传前端设计部部长、动机院计算机爱好者协会会长、厚德工作室负责人、武大青盟团队成员、班级体育委员&amp;hellip;..再加上大三的专业课多又难、院网动不动被黑、学工部网站改版、青传部长会、社联社团理事会&amp;hellip;&amp;hellip;.每天都在搞各种网站改版、敲各种代码、写各种材料，生活基本上都被各种琐事充斥着，有时候觉得很享受，有时候会很烦。
昨天跟狗潘聊天，我跟他说我每天都很忙，他要我想一想我现在每天在忙的这些事情是否值得。关于这个问题，我也想过很多次，虽然说我的梦想是进腾讯，我应该踏踏实实学技术而不是每天都忙社团，但是我感觉社团能够带给我的某种方面的成就感跟通过技术开发出某个产品所带来的快感是一样的。 当听到 13 级的小朋友亲切的叫我“会长”的时候我会很开心，当部门的人说我是“中国好部长”的时候我会觉得欣慰。我相信我所做的一切大家都看在眼里，我并不是要别人觉得我多么的不错，我只是想做好我职责范围内的事。
下学期或许我会辞去青传前端设计部一职，我想去系主任郭老师的实验室跟着学长学姐一起搞开发；我想准备 2014 年春季腾讯的实习生校招，踏踏实实把技术再学好一点；我想多花点心思把厚德工作室的团队带好，让更多的人参与到网站的设计与维护中来；我想准备考研，在腾讯面试失败之后就去考计算机研究生；我还想多开发几个好的产品出来，比如一个多功能的微信公众平台&amp;hellip;&amp;hellip;.毕竟我是人，我不是神。我的精力是有限的，在多重选择的压力下，我必须有所取舍。所以我下学期应该会选择放弃前端，尽管我喜欢这个行业，喜欢这份工作，喜欢部门里面的那些可爱的人。
工作是一种体验。前端设计部一学期的工作我收获了很多，以前的我很腼腆，不太擅长在很多人面前演讲，通过在青传参加各种大小会以及自己组织的部门例会之中，我变得开朗了，口才也有了长进，我能够很流利的当着很多人的面表述我的想法，传达我的价值观。我也经常跟我们部门的人说：要珍惜每一次在公众场合发言的机会。
寒假我会组织部门里的人把未来网首页及其子网站的样式尽可能多的重新设计一遍，我希望能让所有人看到我们青传的技术实力，看到我们前端的优秀设计。也希望能有更多的人了解前端设计这个行业，能有更多的人加入到我们前端设计师的队伍之中。
为什么我的眼里常含泪水，因为我对前端爱的深沉。祝愿我大前端越来越好！</description>
    </item>
    
    <item>
      <title>手把手教你做网站</title>
      <link>https://idoubi.cc/legacy/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%81%9A%E7%BD%91%E7%AB%99/</link>
      <pubDate>Sat, 07 Dec 2013 02:28:13 +0000</pubDate>
      
      <guid>https://idoubi.cc/legacy/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%81%9A%E7%BD%91%E7%AB%99/</guid>
      <description>网页设计是一个大家听得比较多的概念，大家平时上网接触的网站也比较多。网上关于网页设计的教学书籍也有一大堆。要真正学会做网站，要学的知识其实还挺多。一个正规点的网站一般包括两部分，前台和后台。所谓前台就是用户打开网页最先看到的内容，包括网站的布局、颜色搭配等一目了然的视觉元素。而后台则是网站管理员用来控制网站内容的平台，包括对网站内容的增删改以及与网站用户的交互等功能。因此从事网站开发的人可以分为两种，一种叫做前端工程师，另一种叫做后台开发人员。前端工程师要求掌握的技能有photoshop平面设计、html、css、javascript（jquery）、Ajax等，要具备一定的审美能力，能够配合网页美工将做好的网页设计效果图用代码做成一个可以点击的html网页。而后台开发员要做的则是实现网站的必要功能，包括网站数据的显示，网站的后台管理功能以及一些必要的交互功能等，后台开发人员要求具备较强的逻辑思维能力和代码编写能力，会基本的网站后台开发语言，php、asp、jsp等，能够配合前端工程师完成网站的业务处理，最终做出一个成品网站。
咱们要做一个网站，首先要对网站的功能和样式等方面有一个基本的策划，然后在ps中做出网站的效果图（可以省略），再用代码把前台和后台写好，最后将网站上传到服务器，绑定域名，这样就完成了一个完整网站的设计。要做一个满足自己需求的网站，最好还是要掌握基本的div+css布局和一种后台开发语言，这里推荐php。服务器的话可以选择自己花钱买一个，或者用国内的云计算平台，BAE，SAE都挺不错。这里推荐SAE。
更多的关于网页设计的知识大家可以自行百度，或者找一些相关的书籍了解一下。现在开始进入正文，教大家在新浪SAE上搭建一个自己的wordpress网站。
第一步：加入SAE新浪云计算平台。
1、百度一下SAE 2、用新浪微博账号登陆（没有新浪微博账号的先去开通微博） 3、授权SAE 4、安全设置（一定要记住这一步设置的安全邮箱和安全密码，后面的步骤要用到） 5、身份确认（一个手机号只能绑定一个SAE账号） 6、注册成功 第二步、安装网站
1、百度一下sae应用仓库 2、在应用仓库里找到wordpress（一个全世界流行的博客系统，也可改造成CMS系统或者是图片管理系统），感兴趣的也可以安装其他web应用 3、点击安装应用，在弹出的页面中填写你的网站域名，后缀默认是sinaapp.com，输入验证码之后点击安装到以上位置 4、在弹出的页面中点击进入初始化页面完成网站的基本配置。 5、填写网站的名称和后台登陆的用户名及密码。
6、网站安装成功，点击登录按钮进入网站后台登录页面。 7、输入用户名和密码进入网站的后台管理页面。 7、在后台管理页面的顶部点击查看站点即可进入网站前台
8、至此，一个属于你的网站安装完成。把网站的网址发给你的朋友他们就可以正常访问了。是不是觉得很简单？ 9、有些人可能会说，按照这教程做下来大家做成的网站都是一样的，而且看起来这么丑，这让我情何以堪呢？呵呵，不要急，朋友，请接着往下看。
第三步、选择符合自己要求的网站主题
1、上面说了，按照前面的两步做下来得到的只是一个默认的网站模板，也许网站的样子并不符合大家的要求，在教大家套用主题模板之前先给大家看几个用wordpress做的网站例子。 第一个给大家看的肯定是我自己的个人博客啦~http://idoubi.cc/。是放在新浪SAE上面的。用的wordpress主题是 WPDAXUE。个人还是蛮喜欢这种风格的。 第二个要给大家看的是我大前端的网站~http://ifront.sinaapp.com/。也是放着新浪SAE上面的。用的wordpress主题是PhotoBroad 。是不是觉得网站的瀑布流效果很炫呢？还是觉得我大前端的帅哥美女很多？ 第三个要给大家看的是我认识的一个技术大神的个人博客~http://www.thinkful.cn/。他是自己买的服务器，买的独立域名，所以后面没有sinaapp.com后缀。他用的wordpress主题是Hcms。大家有空可以上该技术大神的网站上去看一看，可以学到很多东西哦~ 2、给大家看的三个网站都是用wordpress二次开发而成的，只是套用了不同的wordpress主题，所以网站前台的风格就各不一样了。后台的样式和功能还是一样的。所以，要做一个好看的网站，首先要选择一个好看的主题，当然，有能力的话你可以根据自己的审美开发自己的主题。这里给大家推荐一个比较好的wordpress主题下载站~http://www.iztwp.com/。 3、主题类型大致有图片主题、CMS主题、企业主题、简洁主题四种，选择一款你喜欢的主题，下载下来先随便放一个地方，一会儿需要用。
第四步、安装主题
1、要是在自己买的服务器上搭建wordpress，配置主题就很简单了。直接在后台的主题栏搜索主题或者把下载的主题上传，启用主题就行了。 2、但是如果是在新浪SAE搭建的wordpress，由于SAE不让直接写入文件，所以直接在后台安装主题的方法是行不通的，这时候我们需要借助其他的工具把主题上传到SAE的wordpress中，然后才能启用该主题。点击前面几步创建好的网站，进入应用管理页面。 3、点击左侧的代码管理，进入代码管理页面。点击操作——创建svn库，创建svn仓库。仓库地址在本页面下方可查看。 4、点击操作—— 编辑代码可以进入代码编辑页面，我们这里暂时不需要进行代码编辑，以后再讲。 5、找到页面下方的代码部署说明，点击第一个请使用svn部署代码。 6、找到文档中心中间处的下载安装，点击TortoiseSVN下载链接。
7、根据自己电脑的操作系统下载相应的TortoiseSVN。 8、安装TortoiseSVN。 9、 ok。安装好TortoiseSVN咱们就要开始安装主题了。在自己电脑上随便找个盘新建一个文件夹，点击右键——SVN Checkout，按理说TortoiseSVN安装成功后鼠标右键会有这个选项的。在弹出的checkout页面第一个输入框里填上3中创建的SVN仓库地址，第二个框中填写刚刚创建的文件夹地址。 10、在弹出的输入框中输入新浪SAE的账号和密码 11、点击ok将会把在SAE创建的wordpress代码全部下载到本地的文件夹。 12、现在看一下本地新建的文件夹里面，就会看到wordpress的代码。 13、SVN部署代码的工作已经完成了。现在可以把我们在第三步下载的主题导入网站了。找到下载好的主题，解压缩。把解压好的文件夹复制粘贴到上一步截图的wp-content 的themes文件夹下。 14、右键单击粘贴过来的主题文件夹，依次选择TortoiseSVN——Add，在接下来的两个步骤中都选择ok。 15、再次右键单击粘贴过来的主题，选择SVN Commit，在接下来的两步中都选择ok。 16、至此，wordpress主题已经上传完毕。步骤有点多，但都是些很基本的操作，草草的看一眼应该都掌握了，有什么不明白或者操作出错的地方可以留言告诉我。那么接下来我们就可以进入后台管理刚刚上传的主题了。
第五步、管理wordpress主题。
1、在浏览器中输入http://你自己定义的域名.sinaapp.com/wp-admin进入后台登陆页面，输入账号和密码进入后台管理页面。依次选择外观——主题可以进入主题管理页面，在可用主题中可以看到刚刚上传的主题，点击启用即可启用该主题。选择主题的自定义、小工具、菜单等选项可以对当前主题进行相应的设置。 2、主题设置好了现在我们需要给网站创建导航栏。比如俺们大前端的网站有下图所示这么几个栏目 那么我就需要在后台的文章——分类目录页面创建这么几个栏目 然后在外观——菜单页面将上面创建的栏目做成菜单。 ![](4(http://blogcdn.idoustudio.com/2014/01/psb-40.png)
3、通过上述步骤网站栏目基本确定了，接下来关于怎么配置网站，改变网站主题的样式还有就是在网站上发布内容的问题就留给大家自己摸索了。有任何疑问可以留言咨询。
通过上面五大步几十小步给大家完整详细的讲解了在新浪SAE上搭建wordpress的全过程，理解起来应该很容易吧？大家可以仿照着做一个属于自己的网站，wordpress的功能还是挺强大的，用它来二次开发博客系统、CMS系统、图片管理系统或者是学校、班级、企业网站都是很不错的选择。也许你安装的主题并不是完全满足你的要求，可能还需要对网站配色、网站logo等地方做适当的调整，那么这就涉及到代码改写的问题了。所以还是建议朋友们去学学php和html、css、javascript等 知识，不要求你学的多么精通，最起码的样式调整总得会吧。
从晚上十一点多开始写这教程，不知不觉快到三点了，困得不行了。说好的明天自习一天可能要呵呵了。。。我是很愿意把我掌握的技术分享出来和大家交流的，所以也希望大家多多支持，多给我一点鼓励。。。
觉得这教程写的不错就动动手分享给你的朋友吧~你们的支持是我最大的动力~谢谢各位~晚安~</description>
    </item>
    
    <item>
      <title>院网修复日志</title>
      <link>https://idoubi.cc/legacy/%E9%99%A2%E7%BD%91%E4%BF%AE%E5%A4%8D%E6%97%A5%E5%BF%97/</link>
      <pubDate>Wed, 04 Dec 2013 00:05:00 +0000</pubDate>
      
      <guid>https://idoubi.cc/legacy/%E9%99%A2%E7%BD%91%E4%BF%AE%E5%A4%8D%E6%97%A5%E5%BF%97/</guid>
      <description>2013 年 12 月 2 日
正在上量子力学课，接到黄老师的电话说院网后台登陆不了，让我马上过去修。于是翘课去了院办，检测了很久，发现原来是 session 变量失效的问题，导致登陆参数传递不了，所以后台登不上去，试过很多次方法，修复不了这一问题，却偶然间发现了木马文件，原来是被黑了，院网代码中被植入了百家乐网站的垃圾信息。 删除了几个垃圾文件，还有三个木马始终删不掉，于是去了网络中心找蔡老师帮忙，蔡老师检测了一下 CPU，发现达到了 90%以上，有个叫 w3wp.exe 的文件占用了系统的大部分 CPU，而且手动停止之后又能自动运行。由于 CPU 占用过高，这时候的 IIS 已经跑不起来了，院网自然也访问不了。蔡老师也没找到解决的方法，叫我回院办给服务器装个杀毒软件杀杀毒，于是我就回院办了。当天下午尝试了很多办法解决 IIS 运行的问题，无果。傍晚的时候黄老师叫了樊学长去帮忙修复，樊学长说 w3wp.exe 是 IIS 运行时候的应用程序，不是病毒，但是同时很多个 w3wp.exe 一起运行占用 CPU 达 90%以上很明显不正常。每次重启之后 CPU 会降低到 20%左右，经过十几分钟之后又会自动上升到 90%以上。我们便是趁着 CPU 较低院网能正常访问的时候去修复 session 失效的问题。既然 session 不能正确传递参数，樊学长想到了用 URL 传递 id 参数的办法，来替代 session 保存登陆信息，但是这样做的不便之处是改动量比较大，每一个后台操作页面都需要写一个参数读取的代码，工作量很大。我们两一直改到晚上 10 点才回宿舍。解决的问题只是暂时性的能登陆进后台，但是不能进行文章添加修改删除的操作。IIS 占用 CPU 过高的问题还是没解决。回宿舍后头痛的要死，躺床上就睡了。2 号，翘课一天。说好的学习呵呵了。。。
2013 年 12 月 3 日
上午还在睡觉被黄老师一个电话叫醒，起来买了点吃的匆匆忙忙跑去院办继续修复院网，上午的工程热力学自然翘了。翘课对于我来说已经是家常便饭了。还是 CPU 占用过高和 session 不能传递参数的问题，我说卸掉 IIS，用 php 重新改写院网，黄老师坚持让我修复 IIS，一天之内恢复院网，为此与她大吵了一架。对于一个程序员而言，维护别人的代码比自己重新设计花的时间要多得多，虽然我极力要求重新设计，但还是拗不过领导，只能妥协，又尝试了很多办法解决 IIS 的问题，无果。再一次去网络中心找蔡老师，蔡老师建议换系统，回来跟黄老师汇报，黄老师要求立刻马上换系统，虽然我给十几台电脑换过系统，但只换过 win7、win8 和 XP，院网服务器用的是 windows 2003 server，我不敢贸然尝试，万一出了什么问题那个责任我负担不起。跟黄老师说我不会，得到了一个白眼。黄老师打电话给戴尔客服，被告知院网服务器过了保修期，需要续保他们才会过来修。后来黄老师又联系上了一个以前负责维护院网的学长，他现在已经毕业参加工作了，那学长很热心，通过远程控制的方式帮我们查找问题，弄了几十分钟也没找到解决办法。于是我联系上了泽韬，他是国软的技术大神，现在负责未来网服务器的维护，泽韬一整天都有课，抽不出时间。最终还是在傍晚的时候来帮忙，检测了一遍，得出的结论还是挂马的问题，说要把木马文件检测出来需要对后台文件一个一个进行检测，可能需要花一个礼拜的时间。我们想到一个权宜之计解决 session 变量传递参数的问题，就是限定登陆 id 为某一个特定的值，只有该 id 对应的用户名才能登陆后台进行相关操作，虽然黄老师还是要求把问题彻底解决，但迫于无奈还是妥协了，要求把 id 设置成她的登陆 id，其他人把新闻发给她由她来发。6 点多的时候，泽韬要回信息学部上课，我们便收工了。3 号，又翘课一天，对院网的修复心灰意冷，暗地下决心，只要这次能把院网修复，我特么就辞职不干了，到现在为止还一毛钱工资没给我，我还每天翘课来搞这堆破事，真特么自找罪受。但是院网毕竟是在我任职期间被黑的，不修好就辞职心里过意不去，还是接着修呗。。。</description>
    </item>
    
    <item>
      <title>2013，我想与梦想谈谈</title>
      <link>https://idoubi.cc/legacy/2013%E6%88%91%E6%83%B3%E4%B8%8E%E6%A2%A6%E6%83%B3%E8%B0%88%E8%B0%88/</link>
      <pubDate>Wed, 27 Feb 2013 20:34:20 +0000</pubDate>
      
      <guid>https://idoubi.cc/legacy/2013%E6%88%91%E6%83%B3%E4%B8%8E%E6%A2%A6%E6%83%B3%E8%B0%88%E8%B0%88/</guid>
      <description>计算机是一个疯狂的领域，正是因为其疯狂，才让激情有了生长的土壤。 ——题记
 2012，我开始与计算机结缘。暑假的时候，我留在学校，空余时间比较多，于是自学了photoshop图像处理技术，一开始接触这门技术，觉得很好玩，在学得差不多的时候就开始弄各种拼图，那时候觉得，把多张不同的图片拼合在一起，实现某个创意是一件很了不起的事情。
大二上学期开学初期，有一次看到支教队做支教成果展示视频，顿时觉得通过一些照片和视频制作电影是一门神奇的技术，便有了自学技术，做一段包涵自己创意的微电影的想法。于是我自学了windows live影音制作技术。
开学后不久，青协征集志愿者服装图案。我代表我们部门设计了三种不同的搭配方案，一共九个不同的图案。虽然所有的素材都是在网上找的，但是为了做出一个比较好的图案我花了不少功夫，有好几次为了修改素材的拼合方式或者是调整色彩平衡，有忙到过半夜两三点。经过好几天的反复修改，我提交了最终图案。没多久青协组织投票，我的设计图案得到了最高支持。虽然有学姐说投票是被我的数量感动的，且不说我的设计图案好坏。不过可惜的是，最终因为某些原因，我的设计图案没有被采用。有过一段时间的失落，但那是我第一次感受到计算机技术学以致用给我带来的快感。
再后来，我开始着手设计班服图案，同第一次设计一样，我依然很投入，经常熬夜搞设计，有时候甚至为了改好某一线条，都会花上好几十分钟时间反复修改。有人说我没必要如此认真，就算改的再好，也不一定有人会注意到这些细节问题。也许吧，我是一个完美主义者，我只想尽可能做出最让人满意的效果。一段时间后，班服图案确定了下来，却因为那时正要入冬，班服T恤派不上用场而得到推迟。于是，我的设计再一次未得到落实。然而经过两次的设计体验，我对计算机技术的实用性有了更深刻的认识。
有一次翻看大一的一些照片，突然有种深刻的触动，于是利用那些照片，借助windows live影音制作技术制作了一段题为《那年大一，我们一起走过的青春》的视频。我想的是，用这样一种方式把我们最美好的记忆保存起来，也许多年后再次翻起，大家会有一种不一样的感觉。同设计服装图案一样，制作视频也花了不少功夫，那段时间眼睛经常会隐隐作痛，添加字幕、搭配图片效果、剪辑视频忙到大半夜也是常事。让我高兴的是，视频发布后，受到了广泛好评，班长祥子说他看了很感动，一些朋友也给了很多积极的评价。成就感和自豪感让我对计算机技术的热爱升温。
国庆后，我开始自学dreamweaver网页制作技术， 并在很短时间内学会和爱上这门技术。于是我开始制作班级网站，拉上黄子和孙子帮忙，但大部分时间都是我一个人在做。有好几次从起床打开电脑开始，一直弄到晚上12点。那是一段痛并快乐着的时光。每天对着电脑改代码，换网页效果，调css样式，我的视力直线下降，经常会感觉到腰酸背痛。然而，每次改好一段代码或者是得到一种满意的网页效果时，那种成就感特别强烈。经过一个月左右时间的努力，我们的班级网站终于在12月1号初步上线。网站发布后，有过短暂的浏览量，一部分人提出了一些中肯的建议。很多人说这个网站做得太粗糙，过于简单。这点我承认，毕竟我们是第一次做网站，而且技术水平有限。我之所以让如此不成熟的网站草草的上线，是希望能得到一些好的建议，我计划寒假在技术水平提升的基础上对网站做进一步修改，争取让它下学期正式上线，为班级建设与班级宣传服务。
为了弥补静态网站的粗糙与简单的缺点，我开始自学动态网站制作技术。在备考的那一个月，别人在复习电工、工程力学的时候，而我坚持泡图书馆自学ASP+VBscript动态网页编程技术、Access数据库技术。由于一切都靠自学，压力很大，学习进度也很慢。有好几次都被卡在某个节点继续不下去，庆幸的是，我还是坚持了下来。经过一段时间的调试，换了一个windows XP系统，我的dreamweaver终于在前天晚上连接上了数据库，我便这样开始了动态网站制作之旅。
这几门计算机技术的学习与实践历程，给了我信心和希望，我开始确定我对计算机的热爱。于是在《武汉七校联合培养计划》公布后，我想也没想就报了武大的计算机双学位。
从那一天起，我开始有了成为IT行业一名了不起的人物的梦想。我开始关注计算机行业的发展与前景，浏览网页的时候习惯先看页面下方的网站介绍和分析网站的布局特点；开始读《乔布斯传》，开始百度比尔盖茨、李彦宏、马化腾等人的创业历程；开始喜欢泡图书馆，习惯去新图A5，只因为那一层有我感兴趣的计算机书籍。我开始坚信“人活着，就是为了改变世界。”
用技术改变世界，这是一个伟大的梦想。然而现实总是无奈的。我主修核工程，辅修计算机，也就意味着我将来去核电站比去计算机公司的可能性大。显然，核电行业在中国的前景还是很好的，而计算机行业的竞争很大。毫无疑问，去核电站是我最好的选择，起码在那里我能得到比一个普通计算机职员更高的工资，单位提供住房和基本的生活保障。而从事计算机，我就必须为房子、车子、生活而处于长期奋斗状态。我曾经跟我爸说，我本科一毕业就去核电站工作，我的工资会很高，一定能让他在55岁退休，而我爸今年已经47了。我很难想象，如果去计算机公司从基层开始做起，我该如何兑现这个承诺。
于是我想到了创业。上次PPTV创始人姚欣来武大演讲的时候我去听了，我第一次见到了那个在研究生一年级休学搞创业并取得成功的了不起人物。我想到了比尔，那个在本科期间辍学创业并成为世界首富的榜样级人物。前天又听一个学妹说起恒之教育，那是一个有一定知名度的教育机构，有着直追新东方的奋斗目标。而它的创始人是我们武大的学长，目前大四。前辈们的创业历程给了我很大的激励，我的心蠢蠢欲动，好几次都想以45°的视角仰望天空，大吼一声：我要创业。
碰巧的是最近学校有个创新创业项目，创业资金好像有5万元。于是我跟祥子开始准备申请创业资金，我们的创业项目主要是做网站。 祥子的定位是给大学有需要的班级提供做网站的服务，而我的定位是开发家教网站或者是网上购书系统，以第三方的身份提供服务，实现盈利。由于定位不同，我跟祥子在创业项目问题上产生了很大的分歧。最后我们的决定是先拟定一份创业计划书，申请到学校的创业资金再说。申请到资金后，祥子负责组建团队以及后期的推广与营销。而我打算做技术。我有种预感，这个寒假会很特别。如果这个项目能成功，说不定会关系到我以后的事业和人生。
计算机于我，是生命里的一缕阳光。它给我原本枯燥的生活带来了生机。在与计算机技术亲密接触的那段时光，我觉得很充实。我很享受那段痛并快乐着的奋斗历程。人的一生，有梦想有追求是一件很幸福的事。计算机给了我太多，它让我体验到了学习和实践的乐趣。与计算机技术的邂逅，使得我没有在自由的大学生活中堕落，没有在撸啊撸的世界里沉迷。我知道我的计算机道路还很长，这条路肯定也很难走。我只坚信一点：兴趣和坚持可以排除万难。我想以后我会花更多的时间学习计算机技术，我创业的视角也会放大放远。如果哪天我失去了斗志，看不到方向的时候，请给我一点鼓励。如果我足够努力，最终实现了我的梦想，请给我一点掌声。
2013，让梦想飞！</description>
    </item>
    
    <item>
      <title></title>
      <link>https://idoubi.cc/courses/cloud-native-devops/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://idoubi.cc/courses/cloud-native-devops/readme/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://idoubi.cc/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://idoubi.cc/readme/</guid>
      <description> 我是艾逗笔，因为深受 Adobe 公司开发的软件影响，故取此昵称。 我喜欢写代码，主攻后端，爱好前端，目标成为一个“全栈工程师”。 我喜欢运动，爱好打篮球，周末会去爬爬山。
  开源爱好者，喜欢自己造轮子。 狼人杀悍跳王者。 理想主义者，强迫症，代码洁癖。  联系方式
 个人博客：http://idoubi.cc 微博：http://weibo.com/u/2611593311 Github：https://github.com/idoubi  </description>
    </item>
    
    <item>
      <title>K8S 基本概念与常用操作</title>
      <link>https://idoubi.cc/courses/cloud-native-devops/02/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://idoubi.cc/courses/cloud-native-devops/02/</guid>
      <description>基本概念 常用操作  管理多集群   创建集群的 kubeconfig 文件  vi ~/.kube/cls1-config
vi ~/.kube/cls2-config
设置 KUBECONFIG 变量  export KUBECONFIG=$KUBECONFIG:~/.kube/cls1-config:~/.kube/cls2-config
查看集群上下文  kubectl config get-contexts</description>
    </item>
    
    <item>
      <title>「docker」基本使用</title>
      <link>https://idoubi.cc/notes/docker-usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://idoubi.cc/notes/docker-usage/</guid>
      <description>在 Centos 安装 docker  卸载原来的版本  yum remove docker \  docker-client \  docker-client-latest \  docker-common \  docker-latest \  docker-latest-logrotate \  docker-logrotate \  docker-engine  安装工具集  yum install -y yum-utils \  device-mapper-persistent-data \  lvm2  设置源地址  yum-config-manager \  --add-repo \  https://download.docker.com/linux/centos/docker-ce.repo  安装 docker 社区版  yum install docker-ce docker-ce-cli containerd.io  查看版本  docker version
 启动 docker  systemctl start docker</description>
    </item>
    
    <item>
      <title>「gvm」Go 多版本管理工具</title>
      <link>https://idoubi.cc/notes/gvm-usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://idoubi.cc/notes/gvm-usage/</guid>
      <description>项目地址：gvm
安装依赖 yum install -y bison 安装 gvm bash &amp;lt; &amp;lt;(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer) source /root/.gvm/scripts/gvm 基本使用  安装默认的 go 版本  yum install -y go
 查看所有可用版本 go  gvm listall
 安装指定版本 go  gvm install go1.17
 查看已安装版本 go  gvm list
 切换指定版本 go  gvm use go1.17
 修改环境变量  export GOPATH=/data/code/go export GOBIN=$GOPATH/bin export PATH=$PATH:$GOBIN </description>
    </item>
    
    <item>
      <title>「helm」基本使用</title>
      <link>https://idoubi.cc/notes/helm-usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://idoubi.cc/notes/helm-usage/</guid>
      <description> 安装 helm  curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 chmod 700 get_helm.sh ./get_helm.sh  查看版本  helm version
 使用本地仓库  # 添加仓库 helm repo add bitnami https://charts.bitnami.com/bitnami # 更新仓库 helm repo update # 查看所有本地仓库 helm repo list # 在仓库中搜索 helm search repo nginx </description>
    </item>
    
    <item>
      <title>「hugo」使用教程</title>
      <link>https://idoubi.cc/notes/hugo-usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://idoubi.cc/notes/hugo-usage/</guid>
      <description>安装 # 下载二进制 wget https://github.com/gohugoio/hugo/releases/download/v0.87.0/hugo_0.87.0_Linux-64bit.tar.gz # 解压缩 tar -zxvf hugo_0.87.0_Linux-64bit.tar.gz # 配置全局命令行 mv hugo /usr/local/bin/hugo # 查看版本 hugo version </description>
    </item>
    
    <item>
      <title>「k3d」基本使用</title>
      <link>https://idoubi.cc/notes/k3d-usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://idoubi.cc/notes/k3d-usage/</guid>
      <description>确保机器上 docker 已安装
  安装 k3d  wget -q -O - https://raw.githubusercontent.com/rancher/k3d/main/install.sh | bash
 查看 k3d 版本  k3d version
 安装 kubectl  curl -LO &amp;#34;https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256&amp;#34; sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl  查看 kubectl 版本  kubectl version --client
 创建集群  k3d cluster create xztcls --api-port 6530 -p &amp;quot;8080:80@loadbalancer&amp;quot; --agents 2</description>
    </item>
    
    <item>
      <title>「nvm」nodejs 多版本管理工具</title>
      <link>https://idoubi.cc/notes/nvm-usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://idoubi.cc/notes/nvm-usage/</guid>
      <description>项目地址：nvm
安装 nvm curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash export NVM_DIR=&amp;#34;$([ -z &amp;#34;${XDG_CONFIG_HOME-}&amp;#34; ] &amp;amp;&amp;amp; printf %s &amp;#34;${HOME}/.nvm&amp;#34; || printf %s &amp;#34;${XDG_CONFIG_HOME}/nvm&amp;#34;)&amp;#34; [ -s &amp;#34;$NVM_DIR/nvm.sh&amp;#34; ] &amp;amp;&amp;amp; \. &amp;#34;$NVM_DIR/nvm.sh&amp;#34; 基本使用  查看所有可用的 nodejs 版本  nvm ls-remote
 安装最新版本 nodejs  nvm install node
 安装指定版本 nodejs  nvm install v15.14.0
 查看已安装的 nodejs 版本  nvm list
 使用指定版本的 nodejs 版本  nvm use v16.7.0
 设置 npm 全局包安装路径  # 自定义全局安装目录 npm config set prefix /data/code/node/npm_global npm config set cache /data/code/node/npm_cache # 查看全局安装目录 npm root -g # 设置环境变量 export NODE_PATH=&amp;#34;/data/code/node/npm_global/lib/node_modules&amp;#34; export NODE_BIN=&amp;#34;/data/code/node/npm_global/bin&amp;#34; export PATH=$PATH:$NODE_BIN </description>
    </item>
    
    <item>
      <title>「oh-my-zsh」使用说明</title>
      <link>https://idoubi.cc/notes/oh-my-zsh-usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://idoubi.cc/notes/oh-my-zsh-usage/</guid>
      <description>安装  # 安装 zsh yum install -y zsh # 安装 oh-my-zsh sh -c &amp;#34;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&amp;#34;  添加自定义配置  vi ~/.zsh_profile
alias profile=&amp;quot;vi ~/.zsh_profile&amp;quot; alias profiled=&amp;quot;source ~/.zshrc&amp;quot; source /root/.gvm/scripts/gvm gvm use go1.17 export GOPATH=/data/code/go export GOBIN=$GOPATH/bin export PATH=$PATH:$GOBIN  修改配置  vi ~/.zshrc
修改主题：ZSH_THEME=&amp;quot;ys&amp;quot;
在末行添加 source ~/.zsh_profile
 快捷键  编辑自定义配置：profile 生效自定义配置：profiled</description>
    </item>
    
    <item>
      <title>个人作品</title>
      <link>https://idoubi.cc/works/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://idoubi.cc/works/</guid>
      <description>豆信  一款简洁、高效的微信开发框架
 GoNews  Golang 每日新闻检索平台
 SQL2Struct  根据 SQL 语句生成 Golang 结构体的 Chrome 插件
 goz  在 Go 中发起 HTTP 请求的工具库</description>
    </item>
    
    <item>
      <title>使用 Helm 管理 K8S 集群</title>
      <link>https://idoubi.cc/courses/cloud-native-devops/03/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://idoubi.cc/courses/cloud-native-devops/03/</guid>
      <description>搭建本地 Helm 仓库 使用腾讯云 Helm 仓库 </description>
    </item>
    
    <item>
      <title>关于我</title>
      <link>https://idoubi.cc/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://idoubi.cc/about/</guid>
      <description> 有逻辑的脑子万里挑一。
  曾经的 Adobe 软件狂热粉，故取此昵称。 2015 年毕业于武汉大学核工程专业，自学转行入坑 IT。 2018 年入职鹅厂，做后台开发。 主要技术栈 Go + PHP，业余爱好前端技术，目标成为”全栈“。 开源爱好者，喜欢自己造轮子。 理想主义者，强迫症，代码洁癖。  联系方式
 个人站：https://idoubi.cc Github：https://github.com/idoubi 微博：http://weibo.com/u/2611593311 知乎：https://www.zhihu.com/people/idoubi/answers  </description>
    </item>
    
    <item>
      <title>搭建本地开发集群</title>
      <link>https://idoubi.cc/courses/cloud-native-devops/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://idoubi.cc/courses/cloud-native-devops/01/</guid>
      <description>ddd </description>
    </item>
    
    <item>
      <title>社交平台</title>
      <link>https://idoubi.cc/social/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://idoubi.cc/social/</guid>
      <description> 个人网站 Github 微博 知乎 掘金 简书 SegmentFault 小专栏  </description>
    </item>
    
  </channel>
</rss>
